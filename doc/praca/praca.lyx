#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass aghdpl
\begin_preamble
% \documentclass{aghdpl}               % przy kompilacji programem latex
% \documentclass[pdflatex,en]{aghdpl}  % praca w języku angielskim
% dodatkowe pakiety
\usepackage{enumerate}
\usepackage{listings}
\lstloadlanguages{TeX}
\usepackage{caption} 
\captionsetup[figure]{labelformat=simple, labelsep=period}
\captionsetup[table]{labelformat=simple, labelsep=period}
%\captionsetup{font=small}
\captionsetup{margin=10pt, font={small}, labelfont=bf, format=hang}
\usepackage{esint}
\clubpenalty = 10000
\widowpenalty = 10000
%\usepackage{graphicx}
%\usepackage{grfext}
%\AtBeginDocument{%
% \PrependGraphicsExtensions*{
%    .mps,.MPS,.pdf,.PDF,.eps,.EPS,.ps,.PS,
%    .png,.PNG,.jpg,.jpeg,.JPG,.JPEG,
%    .funny,.foobar
%  }%
%  \PrintGraphicsExtensions % see .log file
%}
% \usepackage[sort=none]{biblatex}
% \setlength{\itemsep}{-1\parsep}
%---------------------------------------------------------------------------
%\usepackage{epstopdf}
\usepackage{mciteplus}
% umozliwia wykrycie nieznanych znaków unicode
\usepackage{newunicodechar}
\DeclareUnicodeCharacter{FFFD}{?????}
\end_preamble
\options pdflatex
\use_default_options true
\maintain_unincluded_children false
\language polish
\language_package auto
\inputencoding utf8
\fontencoding global
\font_roman utopia
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics none
\default_output_format default
\output_sync 0
\bibtex_command bibtex
\index_command default
\float_placement H
\paperfontsize 12
\spacing onehalf
\use_hyperref true
\pdf_title "Praca dyplomowa"
\pdf_author "Wojciech Gumuła"
\pdf_subject "Algorytm detekcji osi pojazdów"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 0
\use_package amssymb 0
\use_package cancel 1
\use_package esint 0
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Indeks
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language polish
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "frame=tblr"
\tracking_changes false
\output_changes false
\html_math_output 3
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
author{Wojciech Gumuła}
\end_layout

\begin_layout Plain Layout


\backslash
shortauthor{W.
 Gumuła}
\end_layout

\begin_layout Plain Layout


\backslash
titlePL{Implementacja algorytmu detekcji osi pojazdów samochodowych w oparciu
 o profile R i X}
\end_layout

\begin_layout Plain Layout


\backslash
titleEN{Implementation of algorithm for vehicle axles detection based on
 R and X-profile}
\end_layout

\begin_layout Plain Layout


\backslash
shorttitle{Detekcja liczby osi pojazdu}
\end_layout

\begin_layout Plain Layout


\backslash
faculty{Wydział Elektrotechniki, Automatyki,
\backslash

\backslash
Informatyki i Inżynierii Biomedycznej}
\end_layout

\begin_layout Plain Layout


\backslash
division{}
\end_layout

\begin_layout Plain Layout


\backslash
specialization{Automatyka i Robotyka}
\end_layout

\begin_layout Plain Layout


\backslash
thesistype{Praca dyplomowa inżynierska}
\end_layout

\begin_layout Plain Layout


\backslash
supervisor{dr inż.
 Zbigniew Marszałek}
\end_layout

\begin_layout Plain Layout


\backslash
acknowledgements{Wymaga odkomentowania linijek w aghdpl.cls} 
\end_layout

\begin_layout Plain Layout

%
\backslash
date{2015} 
\end_layout

\begin_layout Plain Layout


\backslash
titlepages
\end_layout

\begin_layout Plain Layout


\backslash
setcounter{tocdepth}{1}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cleardoublepage{}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter*
Wstęp
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Wstęp}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Zadanie wykrywania osi pojazdów samochodowych w ruchu drogowym wykonywane
 jest przy użyciu czujników różnego typu.
 Wśród najpopularniejszych metod wymienić można piezoelektryczne czujniki
 nacisku i czujniki kwarcowe.
 Znane są również aplikacje wykorzystujące metody wizyjne 
\begin_inset CommandInset citation
LatexCommand cite
key "Meller1997"

\end_inset

, niezależnie lub we współpracy z detektorami innego typu.
 
\end_layout

\begin_layout Standard
Pośród innych parametrów pojazdu, które podlegają analizie wymienić należy
 prędkość, kolor oraz wymiary pojazdu i jego wagę (lub nacisk wywierany
 przez poszczególne osie).
 Uzyskanie tych informacji wymaga często wykorzystania czujników różnych
 typów.
 Konieczna bywa również kategoryzacja pojazdów na podstawie ich cech - na
 przykład liczby osi lub długości.
 
\end_layout

\begin_layout Standard
Uzyskiwane w ten sposób informacje znajdują wiele zastosowań.
 Systemy badania wagi pojazdu 
\shape italic
WIM
\shape default
 (ang.
 weigh-in-motion) wykorzystywane są przez służby policji do wykrywania pojazdów
 przeciążonych i ich eliminacji z dróg, zwiększając w ten sposób bezpieczeństwo.
 Czujniki określające liczbę osi pozwalają na budowę systemów automatycznego
 naliczania opłat na płatnych odcinkach dróg.
 Układy detekcji pojazdów wykorzystywane są do budowy oprogramowania sterującego
 sygnalizacją świetlną na skrzyżowaniach.
 Ponadto, zbiór danych zawierający informacje o natężeniu ruchu oraz parametrach
 pojazdów pozwala na analizę ruchu i zaplanowanie rozwoju infrastruktury
 drogowej.
\end_layout

\begin_layout Standard
Pracownicy Katedry Metrologii i Elektroniki Akademii Górniczo-Hutniczej
 w swych badaniach poruszają temat wykorzystania czujników indukcyjnych
 w celu badania parametrów pojazdu.
 Wykorzystanie czujników tego typu można uzasadnić ich dużą trwałością,
 niską ceną i niedużym skomplikowaniem instalacji.
 Pozwalają na badanie szeregu parametrów pojazdów, takich jak prędkość,
 długość czy liczba osi, oraz parametrów strumienia ruchu, na przykład natężenia
 ruchu czy odległości czasowych pomiędzy kolejnymi pojazdami.
 Algorytm wykorzystujący czujniki indukcyjne, którego implementacja zostanie
 zbudowana pozwala na detekcję liczby osi pojazdu z dokładnością ponad 95%,
 cechując się przy tym niewielką złożonością obliczeniową 
\begin_inset CommandInset citation
LatexCommand cite
key "marszalek2013"

\end_inset

.
\end_layout

\begin_layout Standard
Zagadnienie wykorzystania czujników indukcyjnych do badania parametrów pojazdów
 samochodowych wciąż nie zostało omówione w sposób obszerny.
 Zaprojektowanie oprogramowania umożliwiającego analizę uzyskiwanych ze
 stanowisk pomiarowych danych w sposób wydajny pozwoli na rozwój zagadnienia
 oraz zademonstruje sposób praktycznego wykorzystania systemu czujników
 przez użytkownika.
\end_layout

\begin_layout Subsection*
Cel i zakres pracy
\end_layout

\begin_layout Standard
Celem pracy jest implementacja algorytmu detekcji osi pojazdów samochodowych
 w oparciu o profile R i X pochodzące z czujników indukcyjnych pętlowych.
 W ramach pracy zrealizowane zostanie oprogramowanie do detekcji osi pojazdów
 na podstawie profili indukcyjnych, wykorzystując do tego język programowania
 C 
\begin_inset CommandInset citation
LatexCommand cite
key "cstandard"

\end_inset

 w środowisku Linux 
\begin_inset CommandInset citation
LatexCommand cite
key "linux-page"

\end_inset

.
 Implementacja algorytmu rozbudowana zostanie o funkcje określania położeń
 osi oraz estymacji długości pojazdu.
 Zaimplementowane zostaną funkcje charakterystyczne dla oprogramowania GNU-Coreu
tils 
\begin_inset CommandInset citation
LatexCommand cite
key "gnustandard"

\end_inset

, w tym obsługa wejść i wyjść, kodów błędu, potoków oraz argumentów wiersza
 poleceń 
\begin_inset CommandInset citation
LatexCommand cite
key "linuxgetopt,linuxpipes,gnucli"

\end_inset

.
\end_layout

\begin_layout Standard
Zaprojektowane zostaną narzędzia umożliwiające pracę programu w trybie ciągłym
 oraz jego testowanie przy użyciu języka Python 
\begin_inset CommandInset citation
LatexCommand cite
key "pythonman"

\end_inset

.
 Zademonstrowana zostanie możliwość rozbudowy programu na przykładzie projektu
 
\shape italic
GUI
\shape default
 - graficznego interfejsu użytkownika.
 Projekt zgodny będzie ze standardem języka C oraz POSIX 
\begin_inset CommandInset citation
LatexCommand cite
key "posix-c-std"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cleardoublepage{}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Czujniki indukcyjne pętlowe w pomiarach parametrów ruchu pojazdów
\end_layout

\begin_layout Standard
Pośród parametrów ruchu drogowego, które podlegają analizie znajdują się
 wartości związane ze strumieniem pojazdów, takie jak natężenie ruchu, interwały
 czasowe pomiędzy kolejnymi pojazdami, czy płynność ruchu.
 Celem badań są również parametry pojazdu, do których należą prędkość, długość,
 masa pojazdu, liczba osi i ich położenie.
 Przedmiotem badania może być również klasyfikacja pojazdu na podstawie
 standardów stworzonych przez organizację 
\shape italic
Federal Highway Administration
\shape default
 
\begin_inset CommandInset citation
LatexCommand cite
key "fhwaclasses"

\end_inset

, wyszczególniającej 13 kategorii, lub innej, zaprojektowanej w celu klasyfikacj
i dedykowanego zagadnienia.
 
\end_layout

\begin_layout Standard
Wśród metod wykorzystywanych do pomiarów parametru ruchu znajdują się czujniki
 indukcyjne, wykorzystywane do badania prędkości, długości, liczby i rozkładu
 osi pojazdu czy klasyfikacji pojazdów.
 Budowę czujnika tego typu przedstawiono na rysunku 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:schemat-czujnika-ind"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/inductivedetector.png
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Schemat pętlowego czujnika indukcyjnego o wymiarach 
\series bold
w
\series default
 x 
\series bold
p
\series default
 w poziomie oraz odległości 
\series bold
o
\series default
 pomiędzy zwojami.
 Źródło: 
\begin_inset CommandInset citation
LatexCommand cite
key "marszalek2013"

\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:schemat-czujnika-ind"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Czujnik indukcyjny pętlowy zbudowany jest z kilku zwojów izolowanego przewodu,
 który zazwyczaj umieszcza się pod nawierzchnią jezdni.
 Szerokość czujnika 
\begin_inset Formula $p$
\end_inset

 jest zazwyczaj co najmniej równa szerokości pasa ruchu, natomiast długość
 
\begin_inset Formula $w$
\end_inset

 w typowych zagadnieniach, jak detekcja długości pojazdu czy położenia osi,
 nie przekracza metra.
 Odległość 
\begin_inset Formula $o$
\end_inset

 pomiędzy zwojami wynika z grubości izolacji sąsiadujących ze sobą przewodów.
 W praktyce wykorzystuje się różne kształty i wymiary, oraz stanowiska składając
e się z jednego lub wielu czujników, zależnie od celów stawianych aplikacji.
 Wybór kształtu czujnika podyktowany jest jego zastosowaniem.
 Znajdują się wśród nich zbieranie informacji o parametrach przejeżdżających
 pojazdów, sterowanie sygnalizacją świetlną czy współpraca z czujnikami
 innego typu, na przykład w celu sygnalizacji detekcji auta i wyzwalania
 w tej sposób dalszych pomiarów.
\end_layout

\begin_layout Standard
Wykorzystanie czujników indukcyjnych pętlowych wymaga zbudowania systemu,
 w skład którego wchodzą również układ kondycjonowania i system przetwarzania
 danych.
 Budowę systemu pomiarowego przedstawiono na rysunku 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:schemat-systemu"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/schemat-systemu.svg

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Schemat systemu pomiarowego.
 
\begin_inset CommandInset label
LatexCommand label
name "fig:schemat-systemu"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Układ kondycjonowania jest modułem elektronicznym odpowiedzialnym za pomiar
 stanu czujnika indukcyjnego.
 Stan ten można opisać poprzez wartości dwóch składowych impedancji czujnika.
 Uzyskuje się w ten sposób sygnały (profile) R i X, proporcjonalne do wartości
 rezystancji zastępczej i reaktancji zastępczej czujnika indukcyjnego.
 Stosuje się również układy kondycjonowania pozwalające na uzyskanie jednego
 sygnału M, będącego pewną określoną funkcją (na przykład pierwiastkiem
 z sumy kwadratów) profili R i X.
 Metoda ta uniemożliwia jednak uzyskanie wartości obu sygnałów na dalszym
 etapie przetwarzania, co znacznie ogranicza możliwe zastosowania układów
 kondycjonowania tego typu.
 Metody projektowania układów kondycjonowania opisane zostały w pracach
 
\begin_inset CommandInset citation
LatexCommand cite
key "Gajd2012,kaewkamnerd2010,marszalek2013"

\end_inset

.
\end_layout

\begin_layout Standard
Układ kondycjonowania komunikuje się z systemem przetwarzania danych.
 Jego rolę może pełnić układ FPGA, układ mikroprocesorowy lub komputer PC.
 Do zadań systemu przetwarzania należeć może analiza danych w celu uzyskania
 wyników, zapis pomiarów do bazy danych lub przesłanie uzyskanych informacji
 przez sieć do innego stanowiska.
 Dzięki wykorzystaniu komunikacji sieciowej możliwa jest ciągła obserwacja
 pracy układu z oddalonego laboratorium.
 Możliwość wykorzystania stosunkowo tanich i nie wymagających wiele energii
 układów mikroprocesorowych ułatwia natomiast montaż stanowiska pomiarowego
 w trudnych warunkach, na przykład w miejscu uniemożliwiającym wykorzystanie
 komunikacji sieciowej.
\end_layout

\begin_layout Standard
Zdaniem autora, liczba publikacji naukowych poruszających temat wykorzystania
 czujników indukcyjnych do badania parametrów ruchu drogowego jest wciąż
 niewielka.
 Jedną z organizacji pracujących nad tym zagadnieniem jest Katedra Metrologii
 i Elektroniki Akademii Górniczo-Hutniczej.
 Powstałe tam publikacje poruszają tematy budowy i właściwości czujników
 pętlowych 
\begin_inset CommandInset citation
LatexCommand cite
key "marszalek2013-2"

\end_inset

, projektowania układów kondycjonowania
\begin_inset CommandInset citation
LatexCommand cite
key "Marszalek2011"

\end_inset

 i zastosowań pętli indukcyjnych do pomiarów parametrów ruchu drogowego
 
\begin_inset CommandInset citation
LatexCommand cite
key "gajda2000,Gajda2010,zeglen2001"

\end_inset

.
 Powstała również praca podsumowująca dotychczas zdobyte informacje w formie
 podręcznika akademickiego 
\begin_inset CommandInset citation
LatexCommand cite
key "Gajd2012"

\end_inset

.
 W rozprawie doktorskiej 
\begin_inset CommandInset citation
LatexCommand cite
key "marszalek2013"

\end_inset

 zaproponowano algorytm detekcji liczby osi pojazdu, którego implementacji
 podjęto się w niniejszej pracy, zwiększając jego możliwości o określanie
 położenia osi oraz przybliżonej długości pojazdu.
\end_layout

\begin_layout Standard
Do stawianych przed indukcyjnymi czujnikami pętlowymi zadań należy detekcja
 obecności pojazdu 
\begin_inset CommandInset citation
LatexCommand cite
key "Ali2012"

\end_inset

.
 Może to znaleźć zastosowanie w systemach sterujących sygnalizacją świetlną
 czy zliczających pojazdy.
 Znane są metody detekcji prędkości pojazdu korzystając z właściwości czujników
 indukcyjnych 
\begin_inset CommandInset citation
LatexCommand cite
key "Robbins2005"

\end_inset

, co może być wykorzystane do badania płynności ruchu.
 Informacja na ten temat jest jedną z funkcji współczesnych systemów nawigacji.
 Czujniki tego typu są również wykorzystywane do klasyfikacji pojazdów 
\begin_inset CommandInset citation
LatexCommand cite
key "Cheung2004,Sun2000"

\end_inset

.
 Dzięki temu możliwe staje się projektowanie systemów automatycznego pobierania
 opłat czy planowania rozwoju połączeń.
\end_layout

\begin_layout Standard
Czujniki indukcyjne wykorzystywane do badania parametrów ruchu drogowego
 są tanie i odporne na większość czynników atmosferycznych i kontakt fizyczny
 z podwoziem pojazdu, dzięki umieszczeniu pod nawierzchnią jezdni.
 Montaż jest prosty a budowa czujnika pozwala na wykorzystanie uzyskiwanych
 informacji w układzie mikroprocesorowym lub komputerze wyposażonym w kartę
 pomiarową.
 Uzyskane w ten sposób profile pozwalają na analizę szeregu parametrów opisujący
ch pojazd, ale również charakterystyki przepływu pojazdów.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cleardoublepage{}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Cel i zakres realizacji projektu
\end_layout

\begin_layout Standard
Przed przystąpieniem do implementacji programu, przyjęte zostały pewne założenia
, opisujące sposób implementacji i cel projektu.
 Umożliwiło to określenie wymagań już na samym początku pracy i dzięki temu
 zwiększyło sprawność pracy.
 Podstawowym założeniem, przyjętym na samym początku pracy była decyzja
 o implementacji algorytmu z wykorzystaniem środowiska Linux.
 Kierowano się przy tym możliwościami oferowanymi przez ten system, które
 omówione są po części poniżej.
 Ponadto system ten cieszy się dużym wsparciem społeczności, dzięki czemu
 nietrudno znaleźć materiały opisujące jego funkcje.
 Zdecydowano się na przygotowanie oprogramowania w języku C, ze względu
 na oferowane przez to narzędzie wydajność i możliwość kontroli nad zasobami.
\end_layout

\begin_layout Standard
Poniżej przedstawiono pozostałe główne założenia projektu i ograniczenia
 przyjęte w trakcie realizacji projektu.
\end_layout

\begin_layout Section
Przyjęte założenia
\end_layout

\begin_layout Subsection*
Praca zgodnie z ideą oprogramowania GNU i standardem POSIX
\end_layout

\begin_layout Standard
W trakcie pracy inspirowano się programami powstającymi wokół ruchu GNU
 
\begin_inset CommandInset citation
LatexCommand cite
key "gnupage"

\end_inset

.
 W przeciągu wielu lat, gdy publikowane było oprogramowanie związane z nim,
 udało się przyjąć pewne założenia programowania, zwane GNU Coding Standards
 
\begin_inset CommandInset citation
LatexCommand cite
key "gnustandard"

\end_inset

.
 Opisują one zagadnienia, które często pojawiają się w trakcie pracy nad
 projektami programistycznymi, takie jak styl formatowania kodu, obsługiwane
 flagi czy sposób pisania komentarzy.
 
\end_layout

\begin_layout Standard
System Linux implementuje większość elementów wchodzących w skład standardu
 POSIX 
\begin_inset CommandInset citation
LatexCommand cite
key "posixstd"

\end_inset

, dzięki zastosowaniu się do reguł opisywanych w standardzie w trakcie pracy
 nad projektem, udało się uzyskać pewną formę przenośności - główny moduł
 programu powinien działać na wszystkich systemach, które implementują ten
 standard.
\end_layout

\begin_layout Standard
W trakcie pisania kodu programu, starano się stosować do Google C++ Style
 Guide - szeregu reguł opisujących sposób formatowania kodu w taki sposób,
 aby zwiększyć jego przejrzystość i czytelność 
\begin_inset CommandInset citation
LatexCommand cite
key "googlestyleguide"

\end_inset

.
 Pozwala to na utrzymanie podobnego stylu dla całego kodu źródłowego programu,
 a dzięki zwiększeniu czytelności wyszukiwanie błędów działania i rozwój
 programu staje się łatwiejszy.
\end_layout

\begin_layout Subsection*
Podział na moduły
\end_layout

\begin_layout Standard
Zdecydowano się podzielić program na mniejsze elementy, moduły, z których
 każdy odpowiedzialny był za wyłącznie jedną funkcjonalność.
 Dzięki temu, kod źródłowy stał się bardziej zwięzły a programy bardziej
 przenośne.
\end_layout

\begin_layout Standard
Wyszczególniono kilka głównych funkcji pakietu
\end_layout

\begin_layout Itemize
moduł algorytmu - odpowiedzialny za główną funkcjonalność, czyli wyznaczanie
 liczby osi pojazdu i ich położeń
\end_layout

\begin_layout Itemize
moduł obserwatora - odpowiedzialny za śledzenie zmian w zadanych ścieżkach
 w oczekiwaniu na nowe pliki, które następnie mogą zostać wysłane do modułu
 algorytmu
\end_layout

\begin_layout Itemize
moduł graficzny - umożliwiający przedstawienie wyników pracy algorytmu poprzez
 interfejs 
\end_layout

\begin_layout Subsection*
Potoki
\end_layout

\begin_layout Standard
Połączenia pomiędzy poszczególnymi modułami zostały zaimplementowane przy
 użyciu potoków dostępnych w systemie Linux 
\begin_inset CommandInset citation
LatexCommand cite
key "linuxpipes"

\end_inset

.
 Pozwalają one na łączenie dwóch programów w taki sposób, by wyjście jednego
 programu wysłane zostało na wejście drugiego.
 Jest to funkcja silnie wykorzystywana w trakcie pracy z systemem Linux.
 Można je wykorzystać na przykład w celu znalezienia wszystkich dokumentów
 tekstowych w danym katalogu i utworzenia archiwum je zawierającego, jak
 na listingu 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:pipes-example"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=bash"
inline false
status open

\begin_layout Plain Layout

find dokumenty | grep '.doc' | tar cfz archiwum.tar -T -
\begin_inset Caption Standard

\begin_layout Plain Layout
Przykład użycia potoków
\begin_inset CommandInset label
LatexCommand label
name "lis:pipes-example"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Symbol 
\emph on
|
\emph default
 oznacza potok łączący dwa sąsiednie programy, przy czym przepływ danych
 następuje od lewej do prawej, a więc wyjście programu 
\shape italic
ls
\shape default
 kierowane jest na wejście programu 
\shape italic
grep
\shape default
.
\end_layout

\begin_layout Subsection*
Obsługa flag
\end_layout

\begin_layout Standard
Projektowany program miał być wywoływany z poziomu konsoli sytemu Linux,
 której wygląda podobnie do przedstawionej na rysunku 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:linux-console"

\end_inset

.
 W celu umożliwienia interakcji z programem wywoływanym w ten sposób, zaimplemen
towano obsługę szeregu flag 
\begin_inset CommandInset citation
LatexCommand cite
key "gnucli"

\end_inset

.
 Dzięki temu już w momencie uruchomienia programu wykonywana jest pełna
 konfiguracja i nie jest konieczna dalsza interakcja użytkownika w trakcie
 pracy.
 Umożliwia to wykorzystanie programu w skryptach, na przykład w celu uruchomieni
a go na serwerze by wyznaczyć dane zebrane dla tysiąca pojazdów poprzez
 jedno wywołanie.
 
\end_layout

\begin_layout Standard
Zaimplementowano flagi odpowiedzialne za tryb pracy algorytmu, umożliwiające
 wyznaczenie danych na temat położenia osi i długości pojazdu, włączające
 weryfikację wyników z czujników piezo, zarządzające ilością informacji
 wyświetlanych na ekranie w trakcie pracy czy przekierowujące wyjście do
 pliku.
 Ponadto, zachowano zgodność ze standardem GNU, który zaleca implementację
 obsługi flag 
\shape italic
--version
\shape default
 i
\shape italic
 --help
\shape default
, wyświetlających odpowiednio informację o wersji programu i stronę pomocy.
\end_layout

\begin_layout Standard
Dokładny opis obsługiwanych flag przedstawiono w rozdziale 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:flags"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/terminal.eps

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Konsola systemowa.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:linux-console"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Wydajność
\end_layout

\begin_layout Standard
Analiza zebranych wyników często wymaga przetworzenia danych dla setek czy
 tysięcy pojazdów.
 Z tego względu przed programem stawiane są silne wymagania dotyczące wydajności.
 Dzięki wykorzystaniu języka C do implementacji modułu odpowiedzialnego
 za obliczenia, możliwa była duża kontrola nad takimi elementami jak operacje
 wejścia-wyjścia i zarządzanie pamięcią, możliwa była duża optymalizacja
 czasu pracy programu dla jednego zestawu danych.
 Dokładna analiza tego zagadnienia przedstawiona została w rozdziale 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:efficiency"

\end_inset

.
\end_layout

\begin_layout Subsection*
Wielofunkcyjność
\end_layout

\begin_layout Standard
Program może być wywoływany na dwa sposoby.
 
\end_layout

\begin_layout Standard
Pierwszy umożliwia jednorazową analizę jednego lub wielu plików, które są
 kompletne w momencie uruchomienia programu.
 Może to być przydatne w sytuacji, gdy konieczne jest przeprowadzenie analizy
 zebranych wcześniej danych.
\end_layout

\begin_layout Standard
Program może również zostać wywołany w trybie oczekiwania na dane.
 W momencie, gdy pojawia się nowy plik z danymi, są one natychmiast analizowane.
 Jest to przydatne, gdy program działa bezpośrednio na systemie odpowiedzialnym
 za zbieranie danych - praktyczne wydaje się zaprojektowanie ciągu operacji,
 w którym dane odczytane trafiają do określonego folderu, są analizowane
 przez przygotowany program, a następnie prezentowane w czytelnej formie,
 na przykład poprzez stronę internetową.
 Pozwalałoby to na nadzorowanie pracy czujnika i zbieranie wyników bez konieczno
ści fizycznego kontaktu z urządzeniem.
\end_layout

\begin_layout Subsection*
Stabilność pracy 
\end_layout

\begin_layout Standard
Ze względu na możliwość użycia programu w trybie ciągłym i analizy tysięcy
 zestawów danych w trakcie jednego uruchomienia programu, konieczne było
 zagwarantowanie stabilnej pracy programu w normalnych warunkach.
 W tym celu przyjęto założenie unikania jakichkolwiek niezdefiniowanych
 zachowań języka C, opisywanych w standardzie 
\begin_inset CommandInset citation
LatexCommand cite
key "cstandard"

\end_inset

 oraz rozwiązywania wszystkich ostrzeżeń przekazywanych przez kompilator
 języka.
 Ponadto, zadbano o zarządzanie pamięcią w taki sposób, by uniknąć wycieków.
 Dokładniejsza analiza tego zagadnienia znalazła się w rozdziale 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:stability"

\end_inset

.
\end_layout

\begin_layout Section
Przyjęte ograniczenia
\end_layout

\begin_layout Standard
Jednocześnie do przyjmowania założeń projektowych, przyjęte zostały również
 ograniczenia, opisujące pracę programu.
\end_layout

\begin_layout Itemize
Program nie jest odpowiedzialny za wstępną analizę sygnałów czujnika w celu
 wykrycia pojazdu.
 Przyjęto założenie, że próbka została już wstępnie przeanalizowana w celu
 odseparowania danych dotyczących krótkiego okresu, gdy pojazd znajdował
 się w otoczeniu czujnika.
\end_layout

\begin_layout Itemize
Jedna próbka danych powinna zawierać informacje dotyczące wyłącznie jednego
 pojazdu.
 W przypadku, gdy w jednym pliku danych pojawią się informacje dotyczące
 wielu pojazdów, zostaną one błędnie zinterpretowane.
\end_layout

\begin_layout Itemize
Próbka danych powinna mieć stosunkowo niewielką długość.
 Powinna zwierać wszystkie użyteczne informacje, a jednocześnie unikać przechowy
wania informacji nieistotnych.
 Zwiększenie rozmiaru próbki wpływa liniowo na czas pracy algorytmu.
 Nie przyjęto jednak żadnej konkretnej długości pomiaru ani jej limitów
 - program powinien zachowywać się poprawnie dla danych o dowolnej długości,
 ograniczeniem może być jedynie ilość dostępnej pamięci i czas pracy procesora.
\end_layout

\begin_layout Itemize
W trakcie projektowania programu, dostosowano go do pracy z konkretnym zestawem
 czujników.
 Praca z innymi czujnikami wymagałaby zmian w kodzie programu, a w przypadku,
 gdy czujniki posiadałyby inne parametry - również w kodzie algorytmu.
\end_layout

\begin_layout Itemize
Algorytm wykrywa poprawnie pojazdy o liczbie osi od dwóch do pięciu.
 W przypadku wykrycia sześciu lub więcej osi, dana próbka uznana zostanie
 za błędną.
\end_layout

\begin_layout Section
Interfejs wejścia-wyjścia programu
\begin_inset CommandInset label
LatexCommand label
name "chap:in-out-interface"

\end_inset


\end_layout

\begin_layout Standard
Przed uruchomieniem programu, konieczne jest zebranie danych z czujników,
 zawierających informacje dla jednego pojazdu.
 Z tego względu konieczna była implementacja programu w taki sposób, by
 zintegrować go z systemem odpowiedzialnym za zbieranie odczytów.
 
\end_layout

\begin_layout Standard
Układ pomiarowy składa się z zestawu pięciu pętli indukcyjnych o rożnych
 parametrach oraz dwóch czujników piezoelektrycznych ułożonych wzdłuż pasa
 ruchu.
 Układ zbiera informacje w formie pary wartości sygnałów R
\begin_inset script subscript

\begin_layout Plain Layout
~
\end_layout

\end_inset

 i X
\begin_inset script subscript

\begin_layout Plain Layout
~
\end_layout

\end_inset

 dla każdej pętli oraz sygnały P
\begin_inset script subscript

\begin_layout Plain Layout
1
\end_layout

\end_inset

 i P
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

 dla czujników piezo.
\end_layout

\begin_layout Standard
Przyjęto założenie, że system ten dostarcza dane w następujący sposób.
\end_layout

\begin_layout Itemize
Dane dostarczane są w formie tekstowej poprzez strumień wejściowy lub plik.
\end_layout

\begin_layout Itemize
Każdy wiersz zawiera próbkę danych dla jednej chwili czasowej w formacie
 trzynastu liczb.
 Pierwsza liczba oznacza czas odczytu próbki w sekundach, a pozostałe dwanaście
 opisuje sześć par sygnałów.
 
\end_layout

\begin_layout Itemize
Symbolem dziesiętnym jest znak kropki 
\begin_inset Quotes pld
\end_inset

.
\begin_inset Quotes prd
\end_inset

, a liczba ujemna opisywana jest przez znak myślnika 
\begin_inset Quotes pld
\end_inset

-
\begin_inset Quotes prd
\end_inset

 bez odstępu, na przykład: -2.4321.
\end_layout

\begin_layout Itemize
Dane są uporządkowane względem czasu, a więc każda kolejna próbka wystąpiła
 po poprzedniej - jest to wykorzystywane w przypadku przekazywania danych
 wielu pojazdów poprzez standardowy strumień wejścia.
\end_layout

\begin_layout Standard
Przykładowy fragment pliku wejściowego spełniający te założenia przedstawiono
 na listingu 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:input-data"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},tabsize=2"
inline false
status open

\begin_layout Plain Layout

0.023	0.16	-0.08	0.12	-0.06	0.07	-0.01	0.09	-0.17	0.11	0.38	0.02	0.03
\end_layout

\begin_layout Plain Layout

0.024	0.18	-0.06	0.12	-0.08	0.10	 0.02	0.09	-0.21	0.14	0.44	0.02	0.00
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Fragment pliku danych wejściowych
\begin_inset CommandInset label
LatexCommand label
name "lis:input-data"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Kolejność danych to:
\end_layout

\begin_layout Itemize
czas w sekundach
\end_layout

\begin_layout Itemize
pętla 3m (2sygnały: X i R)
\end_layout

\begin_layout Itemize
pętla 1m (2sygnały: X i R)
\end_layout

\begin_layout Itemize
pętla 0,5m (2sygnały: X i R)
\end_layout

\begin_layout Itemize
pętla 0,3m (2sygnały: X i R)
\end_layout

\begin_layout Itemize
pętla 0,1m (2sygnały: X i R)
\end_layout

\begin_layout Itemize
czujnik piezo 1
\end_layout

\begin_layout Itemize
czujnik piezo 2
\end_layout

\begin_layout Standard
Przyjęto również następującą konwencję formatu wyjścia programu.
\end_layout

\begin_layout Standard
Format w przypadku korzystania z podstawowej funkcji programu, a więc wykrywania
 liczby osi pojazdu, przyjmuje postać
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

źródło n
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Gdzie 
\shape italic
źródło
\shape default
 to nazwa pliku który przekazany był jako argument programu, lub ciąg 
\begin_inset Quotes pld
\end_inset

stdin
\begin_inset Quotes prd
\end_inset

 w przypadku wykorzystania strumienia wejściowego, a 
\shape italic
n 
\shape default
to liczba osi pojazdu (z wyszczególnieniem ciągu 
\begin_inset Quotes pld
\end_inset

5up
\begin_inset Quotes prd
\end_inset

 oznaczającego wykrycie pojazdu pięcioosiowego, z podniesioną jedną osią).
\end_layout

\begin_layout Standard
W przypadku wywołania dodatkowych funkcji programu, wyjście ulega rozwinięciu
\end_layout

\begin_layout Itemize
Funkcja wyznaczania położeń osi pojazdu wyświetla na wyjściu dodatkowy ciąg
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

źródło n d l_1 ...
 l_n+1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Gdzie 
\shape italic
d
\shape default
 oznacza długość pojazdu a wartości 
\shape italic
l
\begin_inset script subscript

\begin_layout Plain Layout

\shape italic
1
\end_layout

\end_inset


\shape default
 ...
 
\shape italic
l
\begin_inset script subscript

\begin_layout Plain Layout

\shape italic
n+1
\end_layout

\end_inset


\shape default
 oznaczają poszczególne odległości zgodnie z rysunkiem 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:schemat-dlugosci"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/schemat_odleglosci-2.svg
	width 100text%
	clip

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Schemat odległości wewnątrz pojazdu osobowego oraz trójosiowego pojazdu
 ciężarowego.
\begin_inset CommandInset label
LatexCommand label
name "fig:schemat-dlugosci"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Funkcja weryfikacji z czujnikami piezoelektrycznymi dodaje drugą linię wyjścia
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "frame=tblr"
inline false
status open

\begin_layout Plain Layout

źródło n
\end_layout

\begin_layout Plain Layout

piezo N
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Gdzie 
\shape italic
N
\shape default
 to liczba osi wyznaczona poprzez czujniki piezoelektryczne.
\end_layout

\begin_layout Itemize
W przypadku wywołania jednocześnie funkcji wyznaczania położeń osi oraz
 weryfikacji na postawie czujników piezoelektrycznych, wyjście przyjmuje
 postać
\end_layout

\begin_layout Standard
i
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

źródło n d l_1 ...
 l_n+1
\end_layout

\begin_layout Plain Layout

piezo N L_1 ...
 L_n-1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Gdzie wartości 
\shape italic
L
\begin_inset script subscript

\begin_layout Plain Layout
1
\end_layout

\end_inset


\shape default
 ...
 
\shape italic
L
\begin_inset script subscript

\begin_layout Plain Layout
n-1
\end_layout

\end_inset


\shape default
 oznaczają odległości pomiędzy osiami zgodnie z rysunkiem 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:schemat-dlugosci"

\end_inset

.
\end_layout

\begin_layout Itemize
Ilość informacji na wyjściu może zmienić się na żądanie użytkownika - możliwe
 jest wytłumienie wszelkich komunikatów, bądź wyświetlenie informacji na
 temat przeprowadzanych obliczeń.
\end_layout

\begin_layout Section*
Podsumowanie
\end_layout

\begin_layout Standard
Dostosowanie się do założeń przyjętych przed rozpoczęciem pracy powinno
 umożliwić większą kontrolę nad powstającym oprogramowaniem.
 Dzięki przyjęciu, że implementacja będzie pracować pod konkretnym systemem,
 od początku dostępne były narzędzia oferowane przez środowisko.
 Odbyło się to kosztem przenośności programów, których wykorzystanie na
 innych systemach, w tym tych z rodziny Windows, wymagałoby czasochłonnych
 korekt kodu.
 Wybór języka C również przyniósł pozytywne skutki - poza opisywanymi wcześniej
 cechami języka, które wykorzystano, przydatne okazały się również silne
 związki pomiędzy tym językiem a jądrem systemu Linux.
 Ten kluczowy składnik systemu w ponad 95% zaimplementowany jest w C 
\begin_inset CommandInset citation
LatexCommand cite
key "githublinux"

\end_inset

, dzięki czemu korzystanie z oferowanych interfejsów jest stosunkowo łatwe,
 gdy używa się tego samego języka.
 Dzięki podjęciu tych decyzji, możliwe stało się wykorzystanie przydatnych
 funkcjonalności systemu - potoki, strumienie, obsługa flag, oraz języka
 C - implementacja sygnałów systemowych czy obsługa błędów.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cleardoublepage{}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Algorytm detekcji liczby osi pojazdu
\end_layout

\begin_layout Standard
Dane pomiarowe z pętli indukcyjnych nie umożliwiały detekcji liczby osi
 pojazdu bez dalszej analizy.
 Na rysunku 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:sygnaly-r-x-wstepne"

\end_inset

 przedstawiono wartości sygnałów R oraz X dla pętli o długościach 10cm oraz
 3m, oraz, pomocniczo, sygnały 
\begin_inset Formula $M_{i}=\sqrt{R_{i}^{2}+X_{i}^{2}}$
\end_inset

 każdej pary.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/r-x-wstepne.svg
	width 50theight%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Przebieg sygnałów R i X dla pętli o długościach 10cm oraz 3m.
\begin_inset CommandInset label
LatexCommand label
name "fig:sygnaly-r-x-wstepne"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Zaproponowano algorytm umożliwiający detekcję liczby osi pojazdu poprzez
 analizę sygnałów przedstawionych na rysunku 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:sygnaly-r-x-wstepne"

\end_inset

.
 Uproszczony schemat tego algorytmu przedstawiono na rysunku 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:alg-flowchart"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/Algorytm detekcji osi.svg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Schemat blokowy algorytmu detekcji liczby osi pojazdu.
\begin_inset CommandInset label
LatexCommand label
name "fig:alg-flowchart"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
W kolejnych sekcjach opisano etapy pracy algorytmu wraz z wynikami pracy
 dla danych wejściowych zaprezentowanych na rysunku 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:sygnaly-r-x-wstepne"

\end_inset

.
\end_layout

\begin_layout Section*
Przetwarzanie wstępne
\end_layout

\begin_layout Standard
Przed przystąpieniem do analizy danych, konieczne było wstępne ich przetworzenie
, w taki sposób, by ze zbioru danych wejściowych wyłuskać wyłącznie użyteczne
 informacje.
 
\end_layout

\begin_layout Standard
Analizując przebiegi sygnałów przedstawione na rysunku 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:sygnaly-r-x-wstepne"

\end_inset

 można zaobserwować przesunięcie w czasie dla okien, w których sygnały uzyskują
 niezerowe wartości.
 Wynika to z budowy stanowiska pomiarowego, w którym kilka pętli indukcyjnych
 umieszczone było kolejno wzdłuż jezdni.
 Z tego powodu w odczytach pojawia się przesunięcie, które należało usunąć
 w pierwszej fazie wstępnego przetwarzania danych.
 
\end_layout

\begin_layout Standard
Na podstawie pierwszych 30 wartości dla każdego sygnału, wyznaczane było
 średnie przesunięcie sygnału względem wartości zerowej.
 Przyjęto, że w pierwsze pomiary powinny być w idealnym środowisku równe
 zero, ponieważ pojazd nie znajdował się wtedy w zasięgu pracy czujnika
 indukcyjnego.
 Dzięki temu możliwe było 
\begin_inset Quotes pld
\end_inset

wyzerowanie
\begin_inset Quotes prd
\end_inset

 sygnału, a więc odjęcie od wszystkich wartości wyznaczonego przesunięcia.
\end_layout

\begin_layout Standard
Przejeżdżający pojazd pozostawał w obszarze aktywnym pętli indukcyjnej (to
 znaczy w obszarze, w którym wartości sygnałów pętli przyjmują niezerowe
 wartości) nie dłużej niż kilka dziesiątych sekundy.
 Z tego powodu, dysponując danymi odczytanymi na przestrzeni kilku sekund,
 duża ich część nie była użyteczna z punktu widzenia algorytmu.
 Zdecydowano się na usunięcie zbędnych wartości w celu uniknięcia niepotrzebnych
 obliczeń, a zatem zwiększenia wydajności algorytmu.
\end_layout

\begin_layout Standard
Na etapie wstępnego przetwarzania sygnałów wyznaczana była również prędkość
 pojazdu.
 Wykorzystano do tego dwa czujniki piezoelektryczne, których odczyty znajdowały
 się w zbiorze danych wejściowych.
 Czujniki te cechowały się binarną wartością sygnału.
 Przy braku nacisku, odczyt wynosił 0V, natomiast w przeciwnym przypadku
 5V.
 Dzięki znajomości odległości pomiędzy dwoma czujnikami oraz okresu próbkowania,
 możliwe było wyznaczenie prędkości poprzez wykrycie zbocza sygnalizującego
 nacisk wywołany przez pierwszą oś przejeżdżającego pojazdu.
 Uzyskana wartość nie była wykorzystywana przez algorytm detekcji liczby
 osi, znalazła jednak zastosowanie w algorytmie wyznaczania długości pojazdu,
 szerzej opisanym w rozdziale 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Detekcja-długości-pojazdu"

\end_inset

.
\end_layout

\begin_layout Standard
Na rysunku 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:sygnaly-r-x-prz-wstepne"

\end_inset

 przedstawiono sygnału po zakończeniu przetwarzania wstępnego.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/r-x-przetwarzanie.svg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Przebiegi sygnałów R i X po przetwarzaniu wstępnym.
 
\begin_inset CommandInset label
LatexCommand label
name "fig:sygnaly-r-x-prz-wstepne"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section*
Przygotowanie sygnału i parametrów
\end_layout

\begin_layout Standard
Po zakończeniu przetwarzania wstępnego, możliwe było przystąpienie do wyznaczeni
a sygnału, na podstawie którego przeprowadzona zostanie detekcja osi oraz
 parametrów Y i H, decydujących o przebiegu detekcji.
\end_layout

\begin_layout Standard
Na podstawie sygnałów 
\begin_inset Formula $R_{0.1m}$
\end_inset

 i 
\begin_inset Formula $X_{0.1m}$
\end_inset

 pętli o długości 10cm wyznaczony został sygnał 
\begin_inset Formula $M$
\end_inset

, opisany wzorem 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:m-signal"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
M(R_{0.1m},X_{0.1m})=R_{0.1m}^{2}+X_{0.1m}^{2}\label{eq:m-signal}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Na bazie sygnałów 
\begin_inset Formula $X_{0.1m}$
\end_inset

 oraz 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english

\begin_inset Formula $M$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
\lang polish
 wyznaczano wartości 
\begin_inset Formula $L_{x}$
\end_inset

- liczby próbek dla których wartość sygnału 
\begin_inset Formula $X_{0.1m}$
\end_inset

 przekracza 0,1V oraz 
\begin_inset Formula $L_{m}$
\end_inset

- liczby próbek dla których sygnał
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
 
\begin_inset Formula $M$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
\lang polish
 przyjmuje wartość większą od 0,5V.
 Poprzez analizę stosunku 
\begin_inset Formula $L_{x}$
\end_inset

 do 
\begin_inset Formula $L_{m}$
\end_inset

 przyjmowano wartości parametrów 
\begin_inset Formula $a/b$
\end_inset

, 
\begin_inset Formula $Y$
\end_inset

, 
\begin_inset Formula $H$
\end_inset

 zgodnie z tabelą 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:parameters"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
warunek
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\frac{L_{x}}{L_{m}}>0,1$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\frac{L_{x}}{L_{m}}\leq0,1$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $a/b$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0,21
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0,5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $H$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0,45
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $Y$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0,8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0,5
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:parameters"

\end_inset

Dobór wartości parametrów.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Parametr 
\begin_inset Formula $H$
\end_inset

 określa szerokość pętli histerezy, natomiast parametr 
\begin_inset Formula $Y$
\end_inset

 - poziom odniesienia, względem którego wyznaczana jest pętla histerezy.
\end_layout

\begin_layout Standard
Kolejnym krokiem było wyznaczenie sygnału 
\begin_inset Formula $K_{p}$
\end_inset

, opisanego wzorem 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:signal-kp"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
K_{p}=a/b\cdot R+X\label{eq:signal-kp}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Pomocniczo wyznaczano wartość 
\shape italic

\begin_inset Formula $K_{pmax}=max(K_{p})$
\end_inset


\shape default
.
 Jeśli spełniony był warunek 
\shape italic

\begin_inset Formula $K_{pmax}>3$
\end_inset


\shape default
, wartości parametrów ulegały zmianie,
\shape italic
 
\begin_inset Formula $Y=0.8$
\end_inset


\shape default
, 
\shape italic

\begin_inset Formula $H=0.45$
\end_inset


\shape default
.
\end_layout

\begin_layout Standard
Sygnał 
\begin_inset Formula $K_{p}$
\end_inset

 poddawany był normalizacji opisanej równaniem 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:signal-ku"

\end_inset

, w wyniku której uzyskiwany był sygnał 
\begin_inset Formula $K_{u}$
\end_inset

 o wartościach nie przekraczających 5V.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
K_{u}=\frac{K_{p}}{K_{pmax}}5V\label{eq:signal-ku}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Sygnał M oraz sygnały K_p i K_u przedstawiono na wykresie 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:sygnaly-m-kp-ku"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/r-x-m-kp-ku.svg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Sygnały 
\begin_inset Formula $M$
\end_inset

, 
\begin_inset Formula $K_{p}$
\end_inset

 i 
\begin_inset Formula $K_{u}$
\end_inset

.
 Dla powyższych sygnałów uzyskano wartości poszczególnych parametrów: 
\begin_inset Formula $L_{x}=91$
\end_inset

, 
\begin_inset Formula $L_{m}=1697$
\end_inset

, 
\begin_inset Formula $K_{pmax}=0.77$
\end_inset

,
\begin_inset Formula $a/b=0.5$
\end_inset

, 
\begin_inset Formula $H=0.5$
\end_inset

, 
\begin_inset Formula $Y=4$
\end_inset

.
\begin_inset CommandInset label
LatexCommand label
name "fig:sygnaly-m-kp-ku"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Sygnał 
\begin_inset Formula $K_{u}$
\end_inset

 oraz parametry 
\begin_inset Formula $H$
\end_inset

 i 
\begin_inset Formula $Y$
\end_inset

 stanowiły dane wejściowe właściwej części algorytmu.
\end_layout

\begin_layout Section*
Detekcja osi
\end_layout

\begin_layout Standard
Sygnał 
\begin_inset Formula $K_{u}$
\end_inset

, którego typowy przebieg przedstawiono na rysunku 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:sygnaly-m-kp-ku"

\end_inset

, pozwala zazwyczaj na detekcję liczby osi pojazdu poprzez wyznaczenie liczby
 impulsów sygnału.
\end_layout

\begin_layout Standard
W tym celu zastosowano licznik impulsów z histerezą, opisaną wyznaczonymi
 wcześniej parametrami 
\begin_inset Formula $H$
\end_inset

 i 
\begin_inset Formula $Y$
\end_inset

.
 Uproszczony sposób implementacji licznika został przedstawiony na listingu
 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:hist-counter"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,tabsize=4,keywordstyle={\color{blue}},commentstyle={\color{green}\itshape},emphstyle={\color{red}},stringstyle={\color{red}},identifierstyle={\color{magenta}}"
inline false
status open

\begin_layout Plain Layout

unsigned counter(double *Ku, unsigned len, double Y, double H)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    unsigned num_axles = 0;
\end_layout

\begin_layout Plain Layout

    unsigned is_high = 0; // flaga stanu
\end_layout

\begin_layout Plain Layout

    const double level_top = Y + H / 2;
\end_layout

\begin_layout Plain Layout

    const double level_bottom = Y - H / 2;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    for (unsigned i = 0; i < len; i++) {
\end_layout

\begin_layout Plain Layout

        if (is_high == 0 && Ku[i] >= level_top) {
\end_layout

\begin_layout Plain Layout

            is_high = 1;
\end_layout

\begin_layout Plain Layout

            num_axles++;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        else if (is_high == 1 && Ku[i] < level_bottom) {
\end_layout

\begin_layout Plain Layout

            is_high = 0;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    return num_axles;
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout
Implementacja licznika osi.
\begin_inset CommandInset label
LatexCommand label
name "lis:hist-counter"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
W wyniku wywołania funkcji dla sygnału K_u przedstawionego na rysunku 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:sygnaly-m-kp-ku"

\end_inset

, uzyskano wynik informujący o wykryciu dwóch osi.
 Na wykresie 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:sygnaly-ku-piezo"

\end_inset

 przedstawiono sygnał 
\begin_inset Formula $K_{u}$
\end_inset

 i sygnał z czujnika piezoelektrycznego, potwierdzający poprawność wyniku.
 Algorytm mógł zakończyć działanie nie wykrywając poprawnie żadnej osi,
 lub wykrywając tylko jedną oś.
 Taki wynik traktowany był jako błędny i w celu rozwiązania błędu zaimplementowa
no metodę detekcji brakujących osi.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/r-x-ku-piezo.svg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Sygnał 
\begin_inset Formula $K_{u}$
\end_inset

oraz sygnał czujnika piezoelektrycznego.
\begin_inset CommandInset label
LatexCommand label
name "fig:sygnaly-ku-piezo"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section*
Detekcja brakujących osi
\end_layout

\begin_layout Standard
Autor przyjął, że wykrycie minimum dwóch osi jest wymagane, by uznać wynik
 pracy algorytmu za poprawny.
 W przypadku wykrycia zera lub jednej osi, parametry algorytmu ulegały zmianie,
 po czym próba detekcji była ponawiana.
 Metoda była powtarzana do czasu uzyskania poprawnego wyniku lub osiągnięcia
 wartości parametrów nie pozwalających na dalszą analizę.
 Schemat opisujący algorytm przedstawiono na rysunku 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Algorytm-detekcji-brakujących"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/Algorytm brakujące osie.svg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Algorytm detekcji brakujących osi.
 
\begin_inset CommandInset label
LatexCommand label
name "fig:Algorytm-detekcji-brakujących"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Wykorzystanie algorytmu detekcji brakujących osi pozwoliło na zwiększenie
 skuteczności programu w poszukiwaniu osi na podstawie danych zawierających
 większe zakłócenia i mniej dokładne odczyty.
 Przykład działania algorytmu zaprezentowano na wykresie 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:sygnaly-ku-piezo-brakujace"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/r-x-ku-piezo-brakujace.svg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Sygnał 
\begin_inset Formula $K_{u}$
\end_inset

oraz sygnał czujnika piezoelektrycznego.
\begin_inset CommandInset label
LatexCommand label
name "fig:sygnaly-ku-piezo-brakujace"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Badając przebieg sygnału K_u można zauważyć zwiększone wartości wielkości
 impulsów zakłóceń w stosunku do impulsów sygnalizujących istnienie osi.
 Może to doprowadzić do sytuacji, kiedy wykryta została by nieistniejąca
 oś, jednak nie zaobserwowano takiego przypadku w trakcie testowania algorytmu.
\end_layout

\begin_layout Section*
Detekcja podniesionej osi
\begin_inset CommandInset label
LatexCommand label
name "sec:Detekcja-podniesionej-osi"

\end_inset


\end_layout

\begin_layout Standard
Ciekawe zagadnienie z punktu widzenia detekcji liczby osi stanowiły pojazdu
 ciężarowe pięcioosiowe, które posiadały możliwość uniesienia jednej z osi.
 W ich przypadku zawodna stawała się metoda detekcji osi przy użyciu czujników
 naciskowych, natomiast czujniki indukcyjne wciąż pozwalały na przeprowadzenie
 próby detekcji.
\end_layout

\begin_layout Standard
Zaprojektowano algorytm detekcji osi podniesionej, który uruchamiany był
 w przypadku wykrycia pojazdu czteroosiowego.
\end_layout

\begin_layout Standard
Przed przystąpieniem do wykonania algorytmu przyjmowano nowe wartości parametrów
: 
\shape italic

\begin_inset Formula $a/b=0.3$
\end_inset

 
\shape default
, 
\shape italic

\begin_inset Formula $H=0.1$
\end_inset


\shape default
.
 Następnie wyznaczano nowy sygnał 
\begin_inset Formula $K_{p}$
\end_inset

 zgodnie z formułą 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:signal-kp"

\end_inset

 oraz wykonywano kolejne kroki algorytmu bazowego do uzyskania znormalizowanego
 sygnału 
\begin_inset Formula $K_{u}$
\end_inset

, opisanego równaniem 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:signal-ku"

\end_inset

.
\end_layout

\begin_layout Standard
Po wyznaczeniu sygnału 
\begin_inset Formula $K_{u}$
\end_inset

, uruchamiany był algorytm analogiczny do opisanego na schemacie 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Algorytm-detekcji-brakujących"

\end_inset

, z uwzględnieniem nowego warunku stopu, którym było wykrycie liczby osi
 różnej od czterech.
 W przypadku wykrycia pięciu osi, uznawano wynik za poprawny.
 W przeciwnym razie, za poprawny uznawano wcześniej uzyskany wynik czterech
 osi.
 
\end_layout

\begin_layout Standard
Przykład działania algorytmu i położenia wykrytych osi zaprezentowano na
 wykresie 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:sygnaly-ku-piezo-podniesiona"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/r-x-ku-piezo-podniesiona.svg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Sygnał 
\begin_inset Formula $K_{u}$
\end_inset

oraz sygnał czujnika piezoelektrycznego.
\begin_inset CommandInset label
LatexCommand label
name "fig:sygnaly-ku-piezo-podniesiona"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Powyższe operacje stanowiły kompletny algorytm poszukiwania osi pojazdu.
 W kolejnych rozdziałach przedstawiono modyfikacje algorytmu, które zwiększają
 jego funkcjonalność oraz umożliwiają weryfikację wyników.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cleardoublepage{}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Detekcja długości i położenia osi w bryle pojazdu.
 Weryfikacja poprawności działania algorytmu.
\begin_inset CommandInset label
LatexCommand label
name "chap:Detekcja-długości-pojazdu"

\end_inset


\end_layout

\begin_layout Section*
Weryfikacja poprawności działania algorytmu przy użyciu sygnałów z czujników
 piezoelektrycznych
\end_layout

\begin_layout Standard
Stanowisko pomiarowe dysponuje dwoma czujnikami piezoelektrycznymi, które
 wykorzystywane są do określania prędkości pojazdu.
 Odczyty te mogą również posłużyć do określenia ilości osi przejeżdżającego
 pojazdu.
 Cecha ta została wykorzystana w programie w celu weryfikacji działania
 algorytmu.
\end_layout

\begin_layout Standard
O ile wykorzystanie danych z czujników piezoelektrycznych do określenia
 liczby osi jest znacznie łatwiejsze niż implementacja algorytmu przy użyciu
 pomiarów z czujników indukcyjnych, to z wykorzystaniem tego typu czujników
 wiążą się ograniczenia.
 Przede wszystkim, niemożliwe jest wykrycie podniesionej osi.
 Odczyt ogranicza się do możliwości wykrycia nacisku osi, a przez to ich
 liczby oraz prędkości pojazdu.
 Czujniki te są również bardziej narażone na obciążenia mechaniczne.
\end_layout

\begin_layout Standard
W celu weryfikacji posłużono się sygnałem z jednego czujnika - zakładając,
 że czujniki działają poprawnie, sygnał z obu powinien mieć przebieg różniący
 się wyłącznie fazą.
 Sygnał przetwarzany był przez funkcję zaprezentowaną na listingu 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:hist-counter"

\end_inset

, przy nastawach 
\shape italic

\begin_inset Formula $Y=2$
\end_inset


\shape default
, 
\shape italic

\begin_inset Formula $H=0.1$
\end_inset


\shape default
.
 Sygnał z czujników piezoelektrycznych powinien być zbliżony do sygnału
 binarnego 0-5 i pozbawiony drgać, wybór poziomu odniesienia w okolicy środka
 tego przedziału zapewnia więc dokładność odczytu.
\end_layout

\begin_layout Standard
Wyznaczenie liczby osi stanowi koniec pierwszej fazy testu.
 W przypadku, gdy nie jest ona równa liczbie wyznaczonej przez algorytm
 detekcji osi, program kończy działanie.
 W przeciwnym razie wyznaczany jest nowy sygnał, 
\begin_inset Formula $CP$
\end_inset

, który stanowi złożenie sygnału z piezo 
\begin_inset Formula $P_{1}$
\end_inset

 oraz sygnału 
\begin_inset Formula $K_{u}$
\end_inset

 przetworzonego przez filtr dwupołożeniowy.
 Sposób obliczania wartości sygnału CP pokazano na listingu 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:cp-signal"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,tabsize=4,keywordstyle={\color{blue}},commentstyle={\color{green}\itshape},emphstyle={\color{red}},stringstyle={\color{red}},identifierstyle={\color{magenta}}"
inline false
status open

\begin_layout Plain Layout

for (unsigned i = 0; i < length; i++) {
\end_layout

\begin_layout Plain Layout

    if (is_high == 0 && Ku[i] >= level_top) {
\end_layout

\begin_layout Plain Layout

        is_high = 5;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    else if (is_high == 5 && Ku[i] < level_bottom) {
\end_layout

\begin_layout Plain Layout

        is_high = 0;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    CP[i] = is_high + P1[i];
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Generowanie sygnału CP.
\begin_inset CommandInset label
LatexCommand label
name "lis:cp-signal"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Otrzymany sygnał 
\begin_inset Formula $CP$
\end_inset

 przetwarzany jest ponownie przez funkcję z listingu 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:hist-counter"

\end_inset

 z parametrami 
\shape italic

\begin_inset Formula $Y=8$
\end_inset


\shape default
, 
\shape italic

\begin_inset Formula $H=0$
\end_inset


\shape default
.
 Wyjście funkcji stanowi liczbę osi wykrytych przez algorytm weryfikacji
 wyników.
\end_layout

\begin_layout Section*
Algorytm detekcji przybliżonej długości i położenia osi w bryle pojazdu
\end_layout

\begin_layout Standard
Informacja na temat liczby osi pojazdu nie pozwala określić dokładnie klasy
 pojazdu.
 Dwie osie posiadają zarówno małe auta osobowe, jak i pojazdy ciężarowe.
 Z tego powodu, dane na temat osi można uzupełnić o długość pojazdu oraz
 o rozstaw poszczególnych osi.
 Taki zbiór danych umożliwia dokładniejsze określenie typu pojazdu, którego
 dotyczy próbka pomiarów.
\end_layout

\begin_layout Standard
W celu wyznaczenia przybliżonej długości pojazdu, zaimplementowano algorytm
 na bazie odczytów z czujników indukcyjnych.
\end_layout

\begin_layout Standard
Wyznaczono sygnał 
\shape italic
M
\shape default
 opisany zależnością 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:signal-m"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
M(R_{1},X_{1})=R_{1}^{2}+X_{1}^{2}\label{eq:signal-m}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Gdzie 
\begin_inset Formula $R_{1}$
\end_inset

 i 
\begin_inset Formula $X_{1}$
\end_inset

 stanowiły wartości sygnałów dla pętli indukcyjnej o długości jednego metra.
\end_layout

\begin_layout Standard
W większości przypadków sygnał taki stanowi dobrą bazę do badania położenia
 pojazdu względem czujnika.
 Przebieg sygnału w czasie przedstawiono na wykresie 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:m-signal"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/dlugosc-m.svg
	width 100text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Przebieg badanego sygnału M dla pojazdu ciężarowego trzyosiowego.
\begin_inset CommandInset label
LatexCommand label
name "fig:m-signal"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Wykorzystując pokazaną na wykresie własność, zaprojektowano metodę określania
 przybliżonej długości pojazdu.
 W tym celu na podstawie wartości sygnału M wybierano ciągły przedział,
 w którym przyjmuje on wartości większe od progu odcięcia 
\begin_inset Formula $K_{l}$
\end_inset

.
 Przyjęto wartość
\begin_inset Formula $K_{l}=0.5V$
\end_inset

.
 Wyznaczony przedział opisany był jako para indeksów określających elementy
 brzegowe 
\begin_inset Formula $[index_{start};index_{end}]$
\end_inset

.
\end_layout

\begin_layout Standard
Wyznaczano następnie długość okna zgodnie z równaniem 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:roznica-indeksow"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
l=index_{end}-index_{start}\label{eq:roznica-indeksow}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
A następnie, na podstawie znajomości różnicy czasu pomiędzy dwoma próbkami
 
\shape italic

\begin_inset Formula $dt$
\end_inset


\shape default
 oraz prędkości pojazdu w metrach na sekundę 
\begin_inset Formula $v$
\end_inset

, której wartość wyznaczono w trakcie przetwarzania wstępnego algorytmu
 detekcji osi, można było uzyskać długość pojazdu 
\shape italic
d 
\shape default
w metrach, zgodnie z równania 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:dlugosc-pojazdu"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
d=l\cdot v\cdot dt\label{eq:dlugosc-pojazdu}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Wartość ta była wyłącznie przybliżeniem rzeczywistej długości pojazdu, wystarcza
jącą do wstępnej selekcji pojazdów.
\end_layout

\begin_layout Standard
Położenia poszczególnych osi wyznaczane są we wcześniejszej części algorytmu,
 w trakcie wyznaczania liczby osi pojazdu.
 Przyjęto , że środek osi znajdował się w punkcie, gdzie wartość sygnału
 
\shape italic

\begin_inset Formula $K_{p}$
\end_inset


\shape default
[
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:signal-kp"

\end_inset

] osiągała lokalne maksimum.
 Znając indeks położenia osi 
\shape italic

\begin_inset Formula $p_{i}$
\end_inset


\shape default
 oraz prędkość pojazdu 
\begin_inset Formula $v$
\end_inset

 i różnicę czasu pomiędzy kolejnymi próbkami 
\begin_inset Formula $dt$
\end_inset

, wyznaczono odległość osi od początku pojazdu, zgodnie z zależnością 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:polozenie-osi"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
P_{i}=p_{i}\cdot v\cdot dt\label{eq:polozenie-osi}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Wynik był następnie weryfikowany - suma długości opisujących segmenty pojazdu,
 zgodnie z rysunkiem 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:schemat-dlugosci"

\end_inset

, nie mogła różnić się od wyznaczonej długości o więcej niż próg błędu 
\begin_inset Formula $e$
\end_inset

, co opisuje równanie 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:dlugosc-weryfikacja"

\end_inset

.
 Przyjęto wartość 
\shape italic

\begin_inset Formula $e=0.02$
\end_inset


\shape default
.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
|d-\sum_{i=0}^{liczba\,osi}l_{i}|\leq e\label{eq:dlugosc-weryfikacja}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Wynik pracy algorytmu dla pojazdu ciężarowego trzyosiowego przedstawiono
 na wykresie 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:m-signal-piezo"

\end_inset

.
 Sygnał detekcji nadwozia (z ang.
 body) pozwalał na estymację rzeczywistej długości pojazdu.
 Pomocniczo zaprezentowano również sygnał detekcji osi, ułatwiający wyobrażenie
 rzeczywistej budowy pojazdu.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/dlugosc-m-piezo.svg
	width 100text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Wynik pracy algorytmu dla pojazdu ciężarowego trzyosiowego.
\begin_inset CommandInset label
LatexCommand label
name "fig:m-signal-piezo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Badając wykres można zaobserwować brak zależności pomiędzy wartościami sygnału
 
\begin_inset Formula $M$
\end_inset

 a położeniami kolejnych osi, co uzasadnia konieczność użycia pomiarów przy
 użyciu pętli indukcyjnej o różnych parametrach dla tych dwóch zagadnień.
\end_layout

\begin_layout Standard
Na żądanie użytkownika możliwa była również weryfikacja poprawności wyznaczonych
 wartości położeń osi na podstawie odczytów z czujników piezoelektrycznych.
 Wymagało to wybrania właściwej instrukcji przy starcie programu.
\end_layout

\begin_layout Standard
Ze względu na uproszczenia przyjęte w algorytmie wyznaczającym odległości
 na bazie odczytów z czujników indukcyjnych, wartości uzyskane z piezo gwarantow
ały zazwyczaj większą dokładność.
 Uznano jednak to zjawisko za dopuszczalne, ponieważ informacja na temat
 długości pojazdu miała pełnić jedynie pomocniczą rolę - z dużym prawdopodobieńs
twem można określić typ pojazdu, znając dokładną ilość osi oraz ich położenia
 i długość pojazdu z dokładnością do kilkunastu centymetrów, bez konieczności
 określania długości wewnątrz pojazdu z dokładnością do milimetrów.
 Ponadto, przewagą czujników indukcyjnych była z pewnością możliwość wykrycia
 położenia osi podniesionej, co opisano w sekcji 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Detekcja-podniesionej-osi"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cleardoublepage{}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Analiza skuteczności algorytmu
\begin_inset CommandInset label
LatexCommand label
name "chap:alg-analysis"

\end_inset

Wstęp
\end_layout

\begin_layout Standard
Wyniki pracy algorytmu detekcji liczby osi oraz ich położenia i długości
 pojazdu silnie uzależniony jest od jakości danych wejściowych.
 Wystąpienie zakłóceń wpływa zwłaszcza na wynik estymowania długości pojazdu.
 Ponadto, kształt uzyskiwanych charakterystyk sygnałów czujnika pętlowego
 uzależniony jest od kategorii pojazdu - inne wartości przyjmuje dla pojazdów
 osobowych, inne dla autobusów czy ciężarówek.
\end_layout

\begin_layout Standard
Zdecydowano się na analizę wyników pracy algorytmu dla pojazdów różnych
 kategorii - pojazdów osobowych, dostawczych oraz ciężarowych dwuosiowych
 i pięcioosiowych, co powinno pozwolić na zbadanie wpływu wymienionych czynników
 na skuteczność programu.
\end_layout

\begin_layout Standard
Na wykresie 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:analiza-osobowy"

\end_inset

 przedstawiono przykładowy wynik algorytmu dla pojazdu osobowego.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/osobowy-alus-M120620_154404.svg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Wynik działania algorytmu dla pojazdu osobowego.
 Wykryto dwie osie, estymowana długość pojazdu wynosiła 
\begin_inset Formula $d=4.37m$
\end_inset

, natomiast odległości pokazane na schemacie 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:schemat-dlugosci"

\end_inset

: 
\begin_inset Formula $l_{1}=1.194m,l_{2}=2.653m,l_{3}=0.523m$
\end_inset

.
 Weryfikacja przy użyciu czujnika piezoelektrycznego zwróciła wartość 
\begin_inset Formula $lp_{2}=2.865m$
\end_inset

.
 Pojazd poruszał się z prędkością 
\begin_inset Formula $v=21.62\frac{m}{s}$
\end_inset

.
 
\begin_inset CommandInset label
LatexCommand label
name "fig:analiza-osobowy"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Wykres u góry przedstawia wartości sygnałów R i X uzyskanych z czujnika
 indukcyjnego o długości 10cm oraz sygnału piezoelektrycznego, zsynchronizowane
 w czasie i ograniczone do okna.
 Kolejny wykres zawiera dane opisujące sygnały wykorzystane w trakcie działania
 algorytmu.
 Sygnał 
\begin_inset Formula $K_{u}$
\end_inset

, opisany zależnością 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:signal-ku"

\end_inset

, wykorzystywany był do detekcji osi, natomiast sygnał 
\begin_inset Formula $M$
\end_inset

, opisany formułą 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:signal-m"

\end_inset

, pozwalał wyznaczyć przybliżoną długość pojazdu.
 Sygnał 
\begin_inset Formula $M$
\end_inset

 został poddany przekształceniu (pierwiastek czwartego stopnia) w celu zwiększen
ia przejrzystości wykresów.
 Ponadto, dołączono sygnały pokazujące przedziały, w których algorytm wykrył
 osie oraz nadwozie pojazdu.
\end_layout

\begin_layout Standard
Na wykresie 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:analiza-dostawczy"

\end_inset

 przedstawiono natomiast wynik pracy algorytmu dla pojazdu dostawczego,
 przyjmując takie same oznaczenia.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/dostawczy2-M120620_155719.svg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Wynik działania algorytmu dla pojazdu dostawczego.
 Wykryto dwie osie, wartości parametrów opisanych pod wykresem 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:analiza-osobowy"

\end_inset

 wyniosły: 
\begin_inset Formula $d=6.803m,l_{1}=1.057m,l_{2}=4.048m,l_{3}=1.698m,lp_{2}=3.994m,v=20.96\frac{m}{s}$
\end_inset

.
\begin_inset CommandInset label
LatexCommand label
name "fig:analiza-dostawczy"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Wykresy 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:analiza-osobowy"

\end_inset

 oraz 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:analiza-dostawczy"

\end_inset

 prezentują typowe charakterystyki sygnałów czujnika indykcyjnego dla pojazdów
 osobowych oraz dostawczych.
 Wyznaczenie położenia osi poprzez bezpośrednią analizę tych sygnałów jest
 utrudnione, natomiast dzięki procedurze wykonywanej przez algorytm, w wyniku
 której powstaje sygnał 
\begin_inset Formula $K_{u}$
\end_inset

, detekcja osi staje się zagadnieniem stosunkowo łatwym, polegającym na
 wykryciu silnych impulsów.
\end_layout

\begin_layout Standard
W obu zaprezentowanych powyżej przypadkach algorytm detekcji osi zwrócił
 poprawny wynik, co potwierdziła analiza sygnałów z czujników piezoelektrycznych.
 Wyznaczona przez algorytm położenia osi odległość pomiędzy osiami również
 była poprawna, zachowując dokładność około dwudziestu centymetrów.
 Utrudniona natomiast okazała się poprawna detekcja długości pojazdu.
 W trakcie projektowania i testowania algorytmu nie udało się uzyskać wartości
 parametrów gwarantujących dokładność większą niż kilkadziesiąt centymetrów.
\end_layout

\begin_layout Standard
Na wykresie 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:analiza-ciezarowy-3"

\end_inset

 przedstawiono wynik pracy algorytmu dla pojazdu ciężarowego trzyosiowego.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/ciezarowy3-M120621_110208.svg
	width 100text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Wynik działania algorytmu dla pojazdu ciężarowego trzyosiowego.
 Wykryto trzy osie, wartości parametrów opisanych pod wykresem 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:analiza-osobowy"

\end_inset

 wyniosły: 
\begin_inset Formula $d=7.797m,l_{1}=1.311m,l_{2}=4.875m,l_{3}=1.361m,l_{4}=0.250m,lp_{2}=4.937m,lp_{3}=1.350m,v=15.62\frac{m}{s}$
\end_inset

.
\begin_inset CommandInset label
LatexCommand label
name "fig:analiza-ciezarowy-3"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Wykres prezentuje typowe charakterystyki sygnałów dla pojazdów ciężarowych
 trzyosiowych.
 Widoczne stały się się impulsy sygnału 
\begin_inset Formula $X_{0.1m}$
\end_inset

, na podstawie których możliwa stałaby się detekcja osi bez wykorzystania
 algorytmu.
 Procedura wyznaczania sygnału 
\begin_inset Formula $K_{u}$
\end_inset

 pozwoliła jednak na uzyskanie jeszcze dokładniejszego wyniku.
 Stało się to istotne zwłaszcza w trakcie działania algorytmu detekcji położenia
 osi, gwarantując dokładność detekcji rzędu kilku centymetrów względem detekcji
 przy użyciu czujników piezoelektrycznych.
 Typowym problemem stała się poprawna detekcja długości pojazdu, zwłaszcza
 wykrycie odległości pomiędzy ostatnią osią a końcem pojazdu.
 Uzasadniono to budową pojazdów ciężarowych i większą odległością podwozia
 od jezdni.
 Powodowało to szybszy zanik indukowanych prądów w trakcie przejazdu pojazdu,
 a w konsekwencji uniemożliwiło detekcję długości pojazdu z dokładnością
 większą niż metr.
 Problem ten wystąpił dla około 30 procent danych.
 Analogiczne wyniki uzyskano dla pojazdów ciężarowych dwu i czteroosiowych.
\end_layout

\begin_layout Standard
Na wykresach 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:analiza-ciezarowy-5"

\end_inset

 i 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:analiza-ciezarowy-5up"

\end_inset

 pokazano wynik pracy algorytmu dla pojazdu ciężarowego pięcioosiowego jadącego
 z opuszczoną oraz uniesioną jedną z osi.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/ciezarowy5-M120620_154810.svg
	width 100text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Wynik działania algorytmu dla pojazdu ciężarowego pięciosiowego.
 Wykryto pięć osi, wartości parametrów opisanych pod wykresem 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:analiza-osobowy"

\end_inset

 wyniosły: 
\begin_inset Formula $d=15.826m,l_{1}=1.756m,l_{2}=3.524m,l_{3}=5.923m,l_{4}=1.295m,l_{5}=1.297m,l_{6}=2.031m,lp_{2}=3.559m,lp_{3}=5.832m,lp_{4}=1.317m,lp_{5}=1.320m,v=19.36\frac{m}{s}$
\end_inset

.
 
\begin_inset CommandInset label
LatexCommand label
name "fig:analiza-ciezarowy-5"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/ciezarowy5up-M120620_194751.svg
	width 100text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Wynik działania algorytmu dla pojazdu ciężarowego pięcioosiowego jadącego
 z podniesioną osią.
 Wykryto pięć osi, wartości parametrów opisanych pod wykresem 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:analiza-osobowy"

\end_inset

 wyniosły: 
\begin_inset Formula $d=16.566m,l_{1}=2.188m,l_{2}=3.673m,l_{3}=5.807m,l_{4}=1.247m,l_{5}=1.300m,l_{6}=2.352m,lp_{2}=3.630m,lp_{3}=7.051m,lp_{5}=1.310m,v=18.60\frac{m}{s}$
\end_inset

.
 
\begin_inset CommandInset label
LatexCommand label
name "fig:analiza-ciezarowy-5up"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Wykresy prezentują typowe charakterystyki sygnałów dla pojazdów pięcioosiowych
 w dwóch konfiguracjach.
 Ponownie pojawieniu się osi towarzyszy impuls sygnału 
\begin_inset Formula $X$
\end_inset

, nie jest on jednak widoczny dla podniesionej osi, co uniemożliwia detekcję
 poprzez bezpośrednią analizę tego sygnału.
 Sukcesem zakończyła się procedura detekcji osi podniesionej, pomimo znacznie
 mniejszej wartości impulsu w tym przypadku.
 Algorytm detekcji położenia osi zagwarantował dokładność rzędu kilku centymetró
w.
 Ponownie zaobserwowano problem z poprawną detekcją odległości ostatniej
 osi od końca pojazdu, występujący dla około 30-40% pomiarów.
\end_layout

\begin_layout Subsubsection*
Podsumowanie
\end_layout

\begin_layout Standard
Interesująca jest możliwość próby detekcji liczby i położenia osi pojazdu
 wyłącznie na podstawie wartości sygnału 
\begin_inset Formula $X$
\end_inset

 pochodzącego z pętli indukcyjnej o długości dziesięciu centymetrów.
 Sygnał ten zawiera impulsy towarzyszące osiom, widoczne zwłaszcza dla pojazdów
 dostawczych i ciężarowych.
 Wykluczono jednak możliwość praktycznego wykorzystania tej metody, uzasadniając
 to kilkoma argumentami.
 Korzystając z tej metody, utrudniona staje się detekcja położenia osi samochodó
w osobowych.
 Detekcja osi podniesionej również uznana została za niemożliwą.
 Ponadto, wykorzystanie zaimplementowanego algorytmu gwarantowało większą
 dokładność wyniku, co przekładało się na uzyskane wartości opisujące wzajemne
 położenie osi.
\end_layout

\begin_layout Standard
O ile wartości opisujące położenie osi uzyskiwane były z dokładnością kilku
 centymetrów, to detekcja długości pojazdu wymagała uwzględnienia większej
 wartości błędu.
 Było to widoczne w niewielkim stopniu dla pojazdów osobowych i dostawczych,
 gdzie dokładność wyniosła kilkadziesiąt centymetrów, a znacznie bardziej
 dla pojazdów ciężarowych, gwarantując dokładność około metra.
 Sytuacja ta może wynikać z ze specyfiki budowy samochodów ciężarowych,
 cechującej się dużą odległością podwodzia od jezdni i jego strukturą budowy.
 Niewykluczony był również wpływ przewożonego ładunku lub jego braku na
 uzyskiwane wyniki.
\end_layout

\begin_layout Subsubsection*
Wpływ zakłóceń
\end_layout

\begin_layout Standard
Algorytm jest odporny na zakłócenia o stałej wartości - są one filtrowane
 na etapie przetwarzania wstępnego poprzez synchronizację sygnału względem
 zera poprzez wyznaczenie średniej wartości na podstawie pierwszych kilkudziesię
ciu pomiarów i usunięcie wyznaczonego offsetu.
\end_layout

\begin_layout Standard
Nie zaobserwowano również wpływu naturalnie występujących błędów pomiaru
 na wynik działania algorytmu detekcji liczby i położenia osi.
 Zbadano wpływ wprowadzenia zewnętrznego zakłócenia o rozkładzie Gaussa,
 wartości oczekiwanej równej zero oraz odchyleniu standardowym przekraczającym
 0,1.
 W wyniku wystąpienia opisanego zakłócenia algorytm wyznaczający przybliżoną
 długość pojazdu zwracał wartość zawyżoną nawet o kilkanaście procent.
 Wykluczono również wpływ innych pojazdów na wynik pomiaru, zakładając,
 że minimalna odległość pomiędzy kolejnymi pojazdami wynosi kilka metrów.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cleardoublepage{}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Omówienie programu
\begin_inset CommandInset label
LatexCommand label
name "chap:usage"

\end_inset


\end_layout

\begin_layout Standard
W trakcie implementacji programu, zdecydowano się na zaprojektowanie rozbudowane
go interfejsu użytkownika, który pozwalał na elastyczne wykorzystanie oprogramow
ania.
 W poszczególnych sekcjach przedstawiono zagadnienia opisujące instalację,
 metody uruchamiania oraz sposób użycia aplikacji.
\end_layout

\begin_layout Section
Wymagania i instalacja
\end_layout

\begin_layout Standard
W trakcie implementacji programu przyjęto kilka założeń odnośnie środowiska
 użytkownika końcowego.
 Przede wszystkim, założono, że algorytm wykrywania osi uruchamiany będzie
 z poziomu systemu rodziny Unix 
\begin_inset CommandInset citation
LatexCommand cite
key "unix-page"

\end_inset

 bądź uniksopodobnego - na przykład Linux 
\begin_inset CommandInset citation
LatexCommand cite
key "linux-page"

\end_inset

.
 Przyjęto, że w systemie dostępna jest biblioteka języka C w standardowej
 wersji GNU 
\begin_inset CommandInset citation
LatexCommand cite
key "gnu-c-lib"

\end_inset

 .
 W celu skompilowania modułu graficznego, konieczne jest również udostępnienie
 standardowej biblioteki języka C++ GNU 
\begin_inset CommandInset citation
LatexCommand cite
key "gnu-cpp-lib"

\end_inset

 oraz biblioteki Qt w wersji 5 
\begin_inset CommandInset citation
LatexCommand cite
key "qtman"

\end_inset

 .
 W trakcie działania, program wykorzystuje elementy języka C, których implementa
cja zależna jest od systemu - w przypadku środowiska Linux, konieczne moduły
 wspierane są od jądra w wersji 2.6.13 i znajdują się w standardowej bibliotece
 języka C.
\end_layout

\begin_layout Standard
W celu uproszczenia procesu budowana i instalacji, posłużono się oprogramowaniem
 cmake 
\begin_inset CommandInset citation
LatexCommand cite
key "cmake-page"

\end_inset

 - program ten umożliwia przeprowadzenie procesu budowania i rozwiązywanie
 zależności niezależnie od systemu operacyjnego użytkownika.
 Przeprowadzono testy z wersjami 2.6 oraz 3.3 i potwierdzono poprawność budowania
 programu.
 
\end_layout

\begin_layout Standard
Oprogramowanie to umożliwia również możliwość przeprowadzenia procesu budowania
 przy użyciu kompilatora zdefiniowanego przez użytkownika.
 W trakcie projektowania programów, duży nacisk położono na ich poprawność
 implementacji - pełną zgodność ze standardem języka.
 Dzięki temu, dowolny kompilator języka C implementujący standard C11 powinien
 umożliwić zbudowanie modułów 
\begin_inset CommandInset citation
LatexCommand cite
key "cstandard"

\end_inset

 .
 Moduł graficzny może zostać zbudowany przy użyciu dowolnego kompilatora
 języka C++ wspierającego standard C++11 
\begin_inset CommandInset citation
LatexCommand cite
key "cpp-standard"

\end_inset

 .
 Moduł zgodny jest również ze standardem C++14, nie wykorzystuje przy tym
 jednak funkcji języka udostępnionych w tej normie.
 Poprawność przebiegu procesu budowania potwierdzono w trakcie testów z
 dwoma kompilatorami - clang w wersji 3.7.0 oraz gcc w wersjach 4.8.1 oraz 5.2.0
 
\begin_inset CommandInset citation
LatexCommand cite
key "clang,gcc"

\end_inset

 .
 Oba kompilatory przeprowadziły proces budowania, nie wskazując przy tym
 na żadne problemy.
\end_layout

\begin_layout Subsection*
Instalacja
\end_layout

\begin_layout Standard
Proces budowania powinien zostać wykonany z poziomu katalogu, który nie
 znajduje się wewnątrz głównego katalogu projektu.
 Standardowym podejściem jest utworzenie katalogu 
\shape italic
build 
\shape default
i przejście do niego.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=bash"
inline false
status open

\begin_layout Plain Layout

[user@pc projekt]$ mkdir build && cd build
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Następnie, wykorzystując oprogramowanie 
\shape italic
cmake, 
\shape default
należy wygenerować zbiór plików wykorzystywanych w procesie budowania.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=bash"
inline false
status open

\begin_layout Plain Layout

[user@pc build]$ cmake ..
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Argumentem programu cmake jest ścieżka do głównego katalogu budowanego projektu.
 W przypadku budowy w niestandardowej lokacji, konieczne jest podanie poprawnej
 ścieżki do katalogu zawierającego kod programu i plik 
\shape italic
CMakeLists.txt
\shape default
.
\end_layout

\begin_layout Standard
Domyślnie nie zostaną wygenerowane pliki potrzebne do zbudowania modułu
 graficznego.
 Można to zmienić, dodając do powyższego polecenia flagę:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=bash"
inline false
status open

\begin_layout Plain Layout

[user@pc build]$ cmake ..
 -DCOMPILE_GUI=ON
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "lis:compile-gui"

\end_inset


\end_layout

\begin_layout Standard
Proces ten powinien zakończyć się powodzeniem, jeśli spełnione zostały wszystkie
 wymagania odnośnie środowiska, w którym budowany jest projekt.
 Kolejnym krokiem jest wygenerowanie plików binarnych dla każdego modułu
 poprzez polecenie:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=bash"
inline false
status open

\begin_layout Plain Layout

[user@pc build]$ make
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ten proces również powinien zakończyć działanie nie wskazując żadnego błędu,
 jeśli spełnione zostały wymagania.
 
\end_layout

\begin_layout Standard
Pliki modułów znajdują się wewnątrz podkatalogu 
\shape italic
/bin
\shape default
 obecnej ścieżki.
 Możliwe jest również zainstalowanie uzyskanych w ostatnim kroku plików
 w systemie, wykorzystując do tego poniższe polecenie.
 Należy jednocześnie pamiętać o konieczności posiadania uprawnień administratora
, by komenda się powiodła.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=bash"
inline false
status open

\begin_layout Plain Layout

[user@pc build]# make install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
W przypadku powodzenia akcji, moduły i ich podręczniki zostały zainstalowane
 i powinny być dostępne z poziomu terminala.
 W dalszej części pracy przyjęto założenie, że użytkownik zdecydował się
 na instalację, tak by maksymalnie uprościć prezentowane polecenia.
\end_layout

\begin_layout Subsection*
Podział na moduły
\begin_inset CommandInset label
LatexCommand label
name "sec:modules"

\end_inset


\end_layout

\begin_layout Standard
Projekt podzielony został na mniejsze moduły, co umożliwiło wykorzystanie
 programu w sposób bardziej elastyczny.
 Dzięki temu, możliwe jest wykorzystanie projektu zarówno w prostych aplikacjach
, jak i budowanie bardziej skomplikowanych łańcuchów wykonań.
 
\end_layout

\begin_layout Standard
W podstawowym module, nazwanym 
\shape italic
axles, 
\shape default
zaimplementowany został algorytm służący do wyznaczania liczby osi pojazdu,
 a także algorytm określania położenia osi i długości pojazdu.
 Znalazły się w nim również funkcje odpowiedzialne za operacje wejścia-wyjścia.
 Kolejny moduł, nazwany 
\shape italic
watcher
\shape default
, odpowiadał za komunikację z systemem użytkownika w celu śledzenia zmian
 w systemie plików, dzięki czemu możliwa była detekcja pojawienia się nowych
 danych i rozpoczęcie dalszej ich obróbki.
 W trakcie pisania pracy powstał również prosty interfejs graficzny, nazwany
 
\shape italic
axles_gui
\shape default
, który umożliwiał przedstawienie wyników działania algorytmu w sposób bardziej
 przyjazny użytkownikowi.
 Sposób jego kompilacji przedstawiony został w listingu 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:compile-gui"

\end_inset

.
\end_layout

\begin_layout Standard
Moduły nie zostały ze sobą powiązane na poziomie implementacji, dzięki czemu
 możliwe było stworzenie kilku odrębnych metod obsługi programu, co zostało
 dokładniej opisane w rozdziale 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:usage"

\end_inset

.
 Moduły zostały dostosowane do pracy ze sobą na poziomie interfejsu w celu
 zapewnienia kompatybilności.
\end_layout

\begin_layout Standard
Projektowaniu interfejsu modułów programowych towarzyszyła inspiracja oprogramow
aniem powstającym wokół ruchu GNU, co pozwoliło na implementację programu
 w sposób sprzyjający dalszej rozbudowie.
 Przykładem tego jest interfejs graficzny, którego projektowanie nie było
 celem pracy, może on jednak stanowić dowód na potwierdzenie tezy o możliwości
 rozwoju oprogramowania.
 Przykładowe kierunki rozwoju to aplikacja odpowiedzialna za komunikację
 sieciową z czujnikami i odbierająca dane - stanowiłaby pierwsze ogniwo
 łańcucha wywołań bądź program zbierający dane uzyskiwane na wyjściu algorytmu
 i przechowujący je w bazie danych - byłoby to ostatnie ogniwo łańcucha.
\end_layout

\begin_layout Section
Metody uruchamiania
\end_layout

\begin_layout Standard
Przyjęto założenie, że podstawową funkcją programu było wyznaczenie liczby
 osi i innych parametrów pojazdu na podstawie danych przechowywanych w pliku
 tekstowym.
 Oprogramowanie zostało zaimplementowane w taki sposób, by domyślnym działaniem
 było zgodne z tym założeniem.
 Zbudowano również inne funkcje, których wywołanie jest możliwe poprzez
 przekazanie parametrów przy starcie programu, co zostało opisane w sekcji
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:flags"

\end_inset

.
\end_layout

\begin_layout Standard
Wyszczególniono dwie podstawowe metody użytkowania programu.
 Pierwszą z nich było uruchomienie modułu 
\shape italic
axles
\shape default
 i przekazanie jako argumenty wiersza poleceń ścieżek do plików, które powinno
 zostać przeanalizowane.
 Program analizował następnie każdy plik, traktując go jako kompletny zbiór
 danych, a po zakończeniu pracy algorytmu dla każdego z nich, kończył działanie.
 
\end_layout

\begin_layout Standard
Drugą metodą, która była badana w trakcie pracy nad programem było uruchomienie
 go w trybie oczekiwania na dane.
 Odbywało się to w przypadku, gdy przy uruchomieniu nie przekazano nazw
 plików poprzez argumenty wiersza poleceń.
 Program uruchamiał się wtedy w trybie odczytu danych ze standardowego strumieni
a wejściowego - stdin, w przypadku wykrycia pojawienia się nowego zbioru
 odczytów uruchamiany był algorytm detekcji, a po zakończeniu działania
 algorytmu program pozostawał w trybie oczekiwania na kolejne dane.
 Opisany tryb pracy był wyjątkowo użyteczny w połączeniu z wykorzystaniem
 innych modułów, takich jak zaimplementowany - śledzący katalog w poszukiwaniu
 zmian, lub zaproponowany w rozdziale 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:modules"

\end_inset

 - odpowiadający za komunikację sieciową z czujnikami.
\end_layout

\begin_layout Standard
W trakcie pracy nad programem posłużono się ideą często wykorzystywaną w
 oprogramowaniu GNU - zdecydowano się możliwość przekazywania danych pomiędzy
 modułami przy użyciu standardowych strumieni.
 Pozwoliło to na tworzenie łańcuchów wywołań modułów, które pozwalały na
 obsługę zaawansowanych zadań.
 Moduł 
\shape italic
axles
\shape default
 działający niezależnie pozwalał wyłącznie na wywołanie algorytmu dla zadanych
 plików lub danych ze strumienia wejściowego.
 Po połączeniu pracy z modułem 
\shape italic
watcher
\shape default
, możliwa stała się praca w trybie oczekiwania, bez konieczności uruchamiania
 programu na nowo dla każdego zestawu danych.
 Połączenie wyjścia modułu algorytmicznego z kolejnym modułem pozwoliło
 na wyświetlanie informacji o pracy algorytmu w interfejsie graficznym.
\end_layout

\begin_layout Standard
Były to jedynie przykłady możliwych zastosowań przy wykorzystaniu modułów
 - możliwe było również wykorzystanie wbudowanych w system narzędzi lub
 zaprojektowanie kolejnych modułów, dedykowanych do konkretnych zadań.
\end_layout

\begin_layout Section
Obsługiwane parametry
\begin_inset CommandInset label
LatexCommand label
name "sub:flags"

\end_inset


\end_layout

\begin_layout Standard
Zbudowano interfejs obsługujący szereg flag, które modyfikowały pracę modułów.
 Pozwoliło to na zdefiniowanie reguł pracy programu na etapie uruchomienia
 i wykluczenie konieczności dalszej interakcji z użytkownikiem w trakcie
 pracy programu.
 Poniżej przedstawiono flagi, których użycie może być przydatne dla użytkownika.
\end_layout

\begin_layout Subsection*
Moduł 
\shape italic
axles
\end_layout

\begin_layout Itemize

\family typewriter
NAZWA_PLIKU_1 ...
 NAZWA_PLIKU_N
\end_layout

\begin_deeper
\begin_layout Standard
Uruchamia działanie algorytmu dla każdego z podanych plików.
 W przypadku nie podania żadnego argumentu tego typu, nastąpi odczyt ze
 strumienia wejściowego 
\shape italic
stdin
\shape default
.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
-c --verify 
\end_layout

\begin_deeper
\begin_layout Standard
Wymusza uruchomienie procedury weryfikacji poprawności wyniku algorytmu
 przy użyciu czujników piezoelektrycznych.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
-p --positions
\end_layout

\begin_deeper
\begin_layout Standard
Wymusza uruchomienie procedury określania położenia osi i przybliżonej długości
 pojazdu.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
-o --output NAZWA_PLIKU
\end_layout

\begin_deeper
\begin_layout Standard
Umożliwia zapisanie wyniku pracy algorytmu w pliku o podanej nazwie.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
-q
\end_layout

\begin_deeper
\begin_layout Standard
Wymusza pracę w trybie cichym, a więc bez wyświetlania żadnych komunikatów
 w trakcie pracy.
\end_layout

\end_deeper
\begin_layout Subsubsection*
Moduł 
\shape italic
watcher
\end_layout

\begin_layout Itemize

\family typewriter
NAZWA_KATALOGU_1 ...
 NAZWA_KATALOGU_N
\end_layout

\begin_deeper
\begin_layout Standard
Lista ścieżek, które będą obserwowane przez moduł.
 W przypadku nie podania żadnego argumentu tego typu, obserwowana będzie
 ścieżka, w której uruchomiony został program.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
-e --extension ROZSZERZENIE
\end_layout

\begin_deeper
\begin_layout Standard
Wymusza śledzenie plików o zadanym rozszerzeniu.
 W przypadku nie podania tego argumentu przy uruchomieniu, śledzone są pliki
 o rozszerzeniu 
\shape italic
lvm
\shape default
.
\end_layout

\end_deeper
\begin_layout Standard
Oba moduły obsługują ponadto wspólne flagi, 
\family typewriter
-h
\family default
 - wyświetlającą skróconą pomoc, oraz 
\family typewriter
-v
\family default
 - pokazującą informację o wersji programu.
\end_layout

\begin_layout Section
Przykładowe aplikacje
\end_layout

\begin_layout Standard
W celu wyznaczenia liczby osi pojazdu, dla którego dane pomiarowe znajdują
 się w pliku 
\shape italic
PLIK.lvm
\shape default
, należy posłużyć się poniższym poleceniem.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=bash"
inline false
status open

\begin_layout Plain Layout

axles PLIK.lvm
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Aby wykonać to zadanie dla wszystkich plików o rozszerzeniu 
\shape italic
lvm
\shape default
 w katalogu 
\shape italic
dane
\shape default
, można wykorzystać jedno z dwóch poleceń.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=bash"
inline false
status open

\begin_layout Plain Layout

axles dane/*.lvm
\end_layout

\begin_layout Plain Layout

cat dane/*.lvm | axles
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Drugie polecenie pokazuje ponadto ideę wykorzystania wbudowanych narzędzi
 systemowych w celu zwiększenia możliwości programu.
\end_layout

\begin_layout Standard
W celu wykrycia liczby osi, weryfikacji przy użyciu czujników piezoelektrycznych
, a także położenia osi i długości pojazdu, można wykorzystać poniższe polecenie.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=bash"
inline false
status open

\begin_layout Plain Layout

axles -p -c PLIK.lvm
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Na wyjściu pojawi się ciąg znaków podobny do poniższego.
 Wyjaśnienie znaczenia poszczególnych elementów wyjścia przedstawiono w
 rozdziale 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:in-out-interface"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=bash"
inline false
status open

\begin_layout Plain Layout

PLIK.lvm 2 12.064 3.295 5.859 2.909
\end_layout

\begin_layout Plain Layout

piezo 2 5.954
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Aby uruchomić program w trybie oczekiwania na dane, które przechowywane
 są w plikach o rozszerzeniu 
\shape italic
data
\shape default
 w katalogu 
\shape italic
odczyty
\shape default
, a wyniki pracy programu przechowywać w pliku 
\shape italic
wyniki.txt
\shape default
 i nie wyświetlać ich bezpośrednio poprzez interfejs użytkownika, można
 posłużyć się łańcuchem wywołań zbudowanym przy użyciu poniższego polecenia.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=bash,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

watcher -e data odczyty | axles -o wyniki.txt
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ostatni przykład przedstawia możliwość rozbudowy powyższego polecenia w
 taki sposób, by wyniki były prezentowane również poprzez interfejs graficzny.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=bash"
inline false
status open

\begin_layout Plain Layout

watcher -e data odczyty | axles -p -o wyniki.txt | axles_gui
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:cmd-gui"

\end_inset

Metoda uruchamiania interfejsu graficznego.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Interfejs graficzny
\end_layout

\begin_layout Standard
Po zakończeniu pracy nad podstawowymi modułami aplikacji, zdecydowano się
 na zaimplementowanie prostego interfejsu graficznego.
 Wykorzystanie interfejsu tego typu umożliwiło prezentację przetwarzanych
 przez algorytm danych w uproszczonej, czytelnej formie.
 Taka forma przetwarzania otrzymanych danych może znaleźć zastosowanie w
 sytuacji, gdy wyniki pracy algorytmu przechowywane są w pliku, natomiast
 użytkownik powinien mieć dostęp do przeglądu danych w celu weryfikacji
 poprawności działania całego układu.
 Sposób uruchamiania umożliwiający pracę w opisany sposób przedstawiono
 na listingu 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:cmd-gui"

\end_inset

.
\end_layout

\begin_layout Standard
Okno interfejsu graficznego przedstawiono na rysunku 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:gui-window"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/okno-gui.png
	width 100text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:gui-window"

\end_inset

Okno interfejsu graficznego.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Przy użyciu interfejsu graficznego możliwe było odczytanie wartości określającyc
h wzajemne położenie poszczególnych osi.
 Ponadto przedstawiana była bryła przybliżonego wyglądu pojazdu, dzięki
 czemu w intuicyjny sposób możliwe stało się odczytywanie liczby osi pojazdu
 na podstawie grafiki.
 Informacja na temat wykrycia uniesionej osi przedstawiana była poprzez
 wizualne uniesienie figury związanej z odpowiednią osią na grafice.
 W dolnej części okna umiejscowiono również stałą skalę, ułatwiającą wizualny
 odbiór grafiki oraz przycisku umożliwiające przełączanie się pomiędzy danymi
 wielu pojazdów.
\end_layout

\begin_layout Standard
Zaprojektowany interfejs stanowił jedynie uproszczony przykład, demonstrujący
 możliwość realizacji takiego rozwiązania.
 W celu implementacji dedykowanego interfejsu graficznego konieczne byłoby
 zdefiniowane wymagań i poświęcenie uwagi na zaprojektowanie najlepszego
 rozwiązania, uzyskane efekty pozwoliłyby jednak rozwinąć program w użytecznym
 kierunku.
\end_layout

\begin_layout Section*
Podsumowanie
\end_layout

\begin_layout Standard
W rozdziale przedstawiono szereg zagadnień związanych z obsługą programu
 - instalację, metody uruchamiania, modyfikowania zasad działania programu,
 czy możliwe aplikacje.
 Zdecydowano się na ograniczenie do zwięzłej prezentacji możliwości programu,
 bez zbędnego w tej sytuacji omawiania reguł działania poszczególnych elementów.
 Dokładniejszy opis programu został przedstawiony przy użyciu mechanizmu
 podręczników, dostępnego w systemie Linux 
\begin_inset CommandInset citation
LatexCommand cite
key "man-pages"

\end_inset

.
 Strony zawierają przedstawiony w zwięzłej formie zbiór informacji na temat
 reguł działania programu, który rozwija zagadnienia przedstawione w rozdziale
 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:usage"

\end_inset

 pracy.
 
\end_layout

\begin_layout Standard
Dostęp do stron podręcznika można uzyskać dzięki poleceniom z listingu 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:man-pages"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "tabsize=4"
inline false
status open

\begin_layout Plain Layout

man axles
\end_layout

\begin_layout Plain Layout

man watcher
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:man-pages"

\end_inset

Dostęp do stron podręcznika.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cleardoublepage{}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Analiza pracy programu
\end_layout

\begin_layout Standard
Przed rozpoczęciem realizacji pracy, przyjęto pewne założenia.
 Kluczowe z nich opisywały normy działania programu, gwarantujące użyteczność
 w wymaganych zastosowaniach.
 Wymagania opisane były w taki sposób, by zapewnić możliwość stabilnego
 działania aplikacji niezależnie od środowiska i czasu pracy programu.
 Istotne było również zapewnienie jak najwyższej skuteczności algorytmu.
 W kolejnych sekcjach opisano poszczególne wymagania i metody oceny ich
 spełnienia.
\end_layout

\begin_layout Section
Poprawność algorytmu
\end_layout

\begin_layout Standard
Niezależnie od pozostałych kryteriów oceny budowanej aplikacji, konieczne
 było zapewnienie wysokiej poprawności wyników pracy algorytmu.
 Detekcja liczby osi pojazdu stanowiła podstawową funkcję programu, tylko
 po osiągnięciu zadowalających wyników pracy algorytmów możliwe było przystąpien
ie do kolejnych etapów implementacji.
\end_layout

\begin_layout Standard
W trakcie realizacji projektu, konieczne okazało się umożliwienie badania
 działania algorytmu wraz z powstawaniem kolejnych wersji programu.
 Zdecydowano się na zaprojektowanie skryptu testującego otrzymywane wyniki
 na podstawie skatalogowanej próby danych, zawierającej zbiór 220 pomiarów
 z czujników indukcyjnych.
 Skrypt zaimplementowany został przy użyciu języka programowania Python,
 uzasadniając to wygodą pisania narzędzi testowych w tym środowisku.
\end_layout

\begin_layout Standard
Przed rozpoczęciem testu konieczna była wstępna konfiguracja poprzez edycję
 załączonego pliku 
\shape italic
config.json
\shape default
.
 Wewnątrz należało zdefiniować ścieżkę katalogu zawierającego dane oraz
 podkatalogi, w których pogrupowane było próbki danych w formie plików o
 rozszerzeniu lvm, dodając do tego poprawną wartość wyniku algorytmu.
 Możliwe było również uruchomienie testu dla innego niż domyślny pliku binarnego
 poprzez edycję odpowiedniego pola.
 W projekcie zapewniono przykładową konfigurację, by ułatwić to zadanie
 w przyszłości.
\end_layout

\begin_layout Standard
Po zakończeniu wstępnej konfiguracji, możliwe było uruchomienie zestawu
 testów, stosując poniższe polecenie z poziomu podkatalogu 
\shape italic
test
\shape default
 projektu.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

python3 test_alg2.py
\end_layout

\end_inset


\end_layout

\begin_layout Standard
W wyniku uruchomienia polecenia w konsoli pojawiło się wyjście przedstawione
 na rysunku 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:test-console"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/test-terminal.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:test-console"

\end_inset

Wynik pracy programu testowego.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
W przypadku wykrycia niezgodności wyniku algorytmu z oczekiwanym, poniżej
 tabeli zawierającej dane liczbowe znajdowała się sekcja zawierająca listę
 plików, dla których wystąpiły niezgodności.
\end_layout

\begin_layout Standard
Wyniki pracy finalnej wersji algorytmu dla pełnej próby, zawierającej dane
 220 pojazdów przedstawiono w tabeli 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:test-results"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="4">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kategoria
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wynik
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Błędy
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Niepoprawne
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ciężarowe 2-osiowe
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
27 / 27
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ciężarowe 3-osiowe
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
28 / 28
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ciężarowe 4-osiowe
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14 / 14
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ciężarowe 5-osiowe
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
31 / 31
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ciężarowe 2-osiowe, podn.
 oś
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17 / 17
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dostawcze
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
33 / 34
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Osobowe, podwozie aluminiowe
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
28 / 29
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Osobowe, podwozie stalowe
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
40 / 40
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Łącznie
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
218 / 220 (99,09%)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0 (0%)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2 ( 0,91%)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:test-results"

\end_inset

Wyniki testów
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Kolumna 
\shape italic
Wynik
\shape default
 zawiera liczbę poprawnych detekcji liczby osi dla pojazdu, kolumna 
\shape italic
Błędy
\shape default
 informuje o liczbie pojazdów, dla których wyznaczono błędną liczbę osi,
 natomiast kolumna 
\shape italic
Niepoprawne
\shape default
 - informację o liczbie próbek, dla których detekcja zakończyła się błędem
 informującym o nieczytelności danych uniemożliwiającej jakąkolwiek detekcję.
\end_layout

\begin_layout Standard
Należy wspomnieć, że zbiór testowy zawierał dane wstępnie przefiltrowane,
 których analiza nie powinna zakończyć się błędem pracy algorytmu.
 Dzięki temu możliwe było badanie poprawności implementacji kolejnych wersji
 - pojawienie się niezerowej liczby błędów lub wzrost liczby niepoprawnych
 danych pozwalał na natychmiastowe wykrycie błędu implementacji.
\end_layout

\begin_layout Standard
Bardziej szczegółową analizę pracy algorytmu zawarto w rozdziale 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:alg-analysis"

\end_inset

 pracy.
\end_layout

\begin_layout Section
Stabilność pracy programu
\begin_inset CommandInset label
LatexCommand label
name "sub:stability"

\end_inset


\end_layout

\begin_layout Standard
Do przewidywanych zastosowań projektowanego oprogramowania należały takie
 jak współpraca ze stanowiskiem pomiarowych i analiza napływających danych
 w sposób ciągły lub uruchomienie programu na serwerze oferującym wysoką
 wydajność w celu szybkiej analizy dużego zbioru danych.
 Z tego względu przez cały okres realizacji projektu, dużą wagę przykładano
 do zapewnienia stabilnej pracy programu, niezależnie od warunków.
 
\end_layout

\begin_layout Standard
By umożliwić wykrycie błędów implementacji na możliwie wczesnym etapie projektu,
 wymuszono ustawianie flag wykrywających niepoprawnie zaimplementowane elementy
 programu.
 Ostrzeżenia - sugerujące niekoniecznie błędne, ale niebezpieczne i możliwie
 błędne zachowania - traktowane były jako błędy i wystrzegano się ich.
 Ponadto wymuszono detekcję struktur, które domyślnie nie są traktowane
 jako niebezpieczne, ale mogą powodować błędy w specyficznych sytuacjach.
 
\end_layout

\begin_layout Standard
Dzięki zastosowaniu takiego podejścia, zaprojektowane oprogramowanie budowane
 jest bez zgłoszenia błędu lub ostrzeżenia na testowanych kompilatorach,
 co znacznie ogranicza możliwość wystąpienia błędnego działania aplikacji.
\end_layout

\begin_layout Standard
Drugą metodą zagwarantowania stabilności pracy była uważna analiza wykorzystywan
ych zasobów pamięci.
 Dostęp do pamięci nie należącej do uruchomienia programu stanowi naruszenie
 zasad pracy w środowisku Linux i mógł spowodować przerwanie pracy programu.
 Należało również pamiętać o zwolnieniu wszelkich wykorzystywanych zasobów.
 W przypadku uruchomienia programu dla zbioru zawierającego wiele pomiarów,
 liczba zajętych zasobów mogłaby wzrastać wraz z każdym pomiarem i ostatecznie
 doprowadzić do wyczerpania dostępnych zasobów pamięci i przerwania pracy
 programu.
\end_layout

\begin_layout Standard
Analizę pracy programu przeprowadzono przy użyciu programu Valgrind - dedykowane
go narzędzia służącego do wykrywania wycieków pamięci 
\begin_inset CommandInset citation
LatexCommand cite
key "valgrind-page"

\end_inset

.
 Proces badania programu przeprowadzono uruchamiając algorytm dla zbioru
 zawierającego kilkaset pomiarów.
 Narzędzie testowe nie wykryło jakichkolwiek problemów z alokacją i wyciekami
 pamięci.
 Pozwoliło to na wysunięcie założenia o poprawności implementacji, gwarantującej
 stabilność działania programu w tym zakresie.
\end_layout

\begin_layout Section
Wydajność pracy programu
\begin_inset CommandInset label
LatexCommand label
name "sub:efficiency"

\end_inset


\end_layout

\begin_layout Standard
Algorytm detekcji liczby osi pojazdu mógł być uruchamiany dla zbioru zawierające
go wiele pomiarów, mógł również pracować bezpośrednio połączony ze stanowiskiem
 pomiarowym, co wymagało szybkości przetwarzania danych pozwalającej na
 uzyskanie wyniku działania dla pomiaru przed pojawieniem się kolejnego.
 Z tego względu, konieczne było zapewnienie odpowiedniej szybkości działania
 programu.
 
\end_layout

\begin_layout Standard
Zastosowanie języka C gwarantowało duży wpływ na sposób realizacji operacji
 algorytmicznych.
 Język ten oferował dostęp do możliwie niskiego poziomu programowania przy
 użyciu instrukcji, które były kompilowane bezpośrednio do asemblera.
 W wyniku pracy nad optymalizacją działania programu, uzyskano ostatecznie
 zadowalającą wydajność.
 W tabeli 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:times"

\end_inset

 przedstawiono wyniki analizy wydajności dla kluczowych wartości, natomiast
 na wykresie zamieszczono wszystkie uzyskane wyniki.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="4">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top">
<column alignment="right" valignment="top">
<column alignment="right" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Liczba pomiarów
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Rodzaj uruchomienia
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Czas pracy programu [s]
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Czas analizy pomiaru [s]
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Strumień wejścia
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
footnotemark
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
0,055
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
0,055
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Argument
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
footnotemark
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
0,054
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
0,054
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
10
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Strumień wejścia
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
0,508
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
0,051
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Argument
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
0,499
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
0,050
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
100
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Strumień wejścia
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
5,174
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
0,052
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Argument
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
4,947
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
0,049
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
1000
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Strumień wejścia
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
50,149
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
0,050
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Argument
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
47,597
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
0,048
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="center" valignment="middle" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
10000
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Strumień wejścia
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
522,708
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
0,052
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Argument
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
510,345
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
0,051
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Średni czas analizy pomiaru
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
0,051
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:times"

\end_inset

Analiza wydajności pracy programu
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addtocounter{footnote}{-2}
\end_layout

\begin_layout Plain Layout


\backslash
stepcounter{footnote}
\backslash
footnotetext{
\end_layout

\begin_layout Plain Layout

Program uruchomiony przy pomocy polecenia 
\end_layout

\begin_layout Plain Layout

{
\backslash
fontfamily{cmtt}
\backslash
selectfont cat PLIKI
\backslash
char`_DANYCH 
\backslash
char`| axles 
\backslash
char`-q}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
stepcounter{footnote}
\backslash
footnotetext{
\end_layout

\begin_layout Plain Layout

Program uruchomiony przy pomocy polecenia 
\end_layout

\begin_layout Plain Layout

{
\backslash
fontfamily{cmtt}
\backslash
selectfont axles 
\backslash
char`-q PLIKI
\backslash
char`_DANYCH}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Pomiar wykonany został na komputerze klasy PC, w przypadku użycia oprogramowania
 na urządzeniu oferującym większą wydajność, wyniki powinny proporcjonalnie
 zmaleć.
\end_layout

\begin_layout Standard
Niezależnie od liczby analizowanych pomiarów, czas analizy jednego zestawu
 danych zbliżony jest do 50 milisekund.
 W trakcie realizacji projektu uznano ten wynik za zadowalający, umożliwiający
 płynną pracę przy analizie danych nawet z najbardziej obciążonych ruchem
 dróg.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/wydajnosc_programu.svg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:times"

\end_inset

Analiza wydajności pracy programu
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

Wydajność programu w sytuacji, gdy dane przekazano poprzez strumień wejścia
 była nieznacznie mniejsza.
 Wytłumaczono to zwiększeniem złożoności obliczeń poprzez konieczność wykonania
 polecenia 
\family typewriter
\size footnotesize
cat
\family default
\size default
 równolegle do pracy algorytmu.
 Różnica ta nie była zauważalna w trakcie pracy wspomaganej modułem 
\shape italic
\size footnotesize
watcher
\shape default
\size default
.
 
\end_layout

\begin_layout Standard
Przeprowadzono również profilowanie, formę dynamicznej analizy kodu przy
 użyciu oprogramowania 
\shape italic
\size footnotesize
Valgrind
\shape default
\size default
.
 Uzyskano wyniki wskazujące, że około 85% czasu wykonania poświęcane było
 na wczytanie danych z pliku tekstowego lub strumienia wejścia, natomiast
 jedynie 15% czasu zajmowało wykonanie algorytmu i uzyskanie wyników.
 Ze względu na użycie dostępnych w bibliotece języka C funkcji ładowania
 danych, niemożliwa okazała się poprawa wydajności w tym względzie.
 Jednym z możliwych rozwiązań było wykorzystanie kilku wątków programu do
 ładowania danych, a tylko jednego do pracy algorytmu.
 Pozwoliłoby znacznie zwiększyć wydajność zwłaszcza w przypadku wykorzystania
 serwerów obliczeniowych, gwarantujących dostęp do wielu rdzeni procesora.
 Nie było to jednak celem realizowanej pracy.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cleardoublepage{}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter*
Podsumowanie
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Podsumowanie}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "bibliografia"
options "bibtotoc,IEEEtranS"

\end_inset


\end_layout

\end_body
\end_document
